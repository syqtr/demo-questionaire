{"remainingRequest":"/Users/sytruong/demo-questionaire/node_modules/babel-loader/lib/index.js!/Users/sytruong/demo-questionaire/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sytruong/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/demo-questionaire/src/components/QuestionTypes/BaseType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sytruong/demo-questionaire/src/components/QuestionTypes/BaseType.vue","mtime":1635747848180},{"path":"/Users/sytruong/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/demo-questionaire/node_modules/babel-loader/lib/index.js","mtime":1627740747092},{"path":"/Users/sytruong/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMubnVtYmVyLmNvbnN0cnVjdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLnRyaW0uanMiOwovLwovLwoKLyoKICBDb3B5cmlnaHQgKGMpIDIwMjAgLSBwcmVzZW50LCBESVRET1QgTHRkLiAtIE1JVCBMaWNlbmNlCiAgaHR0cHM6Ly9naXRodWIuY29tL2RpdGRvdC1kZXYvdnVlLWZsb3ctZm9ybQogIGh0dHBzOi8vd3d3LmRpdGRvdC5oci9lbgoqLwppbXBvcnQgUXVlc3Rpb25Nb2RlbCBmcm9tICcuLi8uLi9tb2RlbHMvUXVlc3Rpb25Nb2RlbCc7CmltcG9ydCBMYW5ndWFnZU1vZGVsIGZyb20gJy4uLy4uL21vZGVscy9MYW5ndWFnZU1vZGVsJzsKaW1wb3J0IHsgSXNNb2JpbGUgfSBmcm9tICcuLi8uLi9taXhpbnMvSXNNb2JpbGUnOwpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0Zsb3dGb3JtQmFzZVR5cGUnLAogIHByb3BzOiB7CiAgICBsYW5ndWFnZTogTGFuZ3VhZ2VNb2RlbCwKICAgIHF1ZXN0aW9uOiBRdWVzdGlvbk1vZGVsLAogICAgYWN0aXZlOiBCb29sZWFuLAogICAgdmFsdWU6IFtTdHJpbmcsIEFycmF5LCBCb29sZWFuLCBOdW1iZXIsIE9iamVjdCwgRmlsZUxpc3RdCiAgfSwKICBtaXhpbnM6IFtJc01vYmlsZV0sCiAgZGF0YTogZnVuY3Rpb24gZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGRpcnR5OiBmYWxzZSwKICAgICAgZGF0YVZhbHVlOiBudWxsLAogICAgICBhbnN3ZXI6IG51bGwsCiAgICAgIGVudGVyUHJlc3NlZDogZmFsc2UsCiAgICAgIGFsbG93ZWRDaGFyczogbnVsbCwKICAgICAgYWx3YXlzQWxsb3dlZEtleXM6IFsnQXJyb3dMZWZ0JywgJ0Fycm93UmlnaHQnLCAnRGVsZXRlJywgJ0JhY2tzcGFjZSddLAogICAgICBmb2N1c2VkOiBmYWxzZSwKICAgICAgY2FuUmVjZWl2ZUZvY3VzOiBmYWxzZQogICAgfTsKICB9LAogIG1vdW50ZWQ6IGZ1bmN0aW9uIG1vdW50ZWQoKSB7CiAgICBpZiAodGhpcy5xdWVzdGlvbi5hbnN3ZXIpIHsKICAgICAgdGhpcy5kYXRhVmFsdWUgPSB0aGlzLmFuc3dlciA9IHRoaXMucXVlc3Rpb24uYW5zd2VyOwogICAgfSBlbHNlIGlmICh0aGlzLnF1ZXN0aW9uLm11bHRpcGxlKSB7CiAgICAgIHRoaXMuZGF0YVZhbHVlID0gW107CiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZW4gaW4gY3VzdG9tIGNvbXBvbmVudHMgdG8gCiAgICAgKiBjaGFuZ2UgdGhlIGFuc3dlciBiZWZvcmUgZ29pbmcgdGhyb3VnaCB2YWxpZGF0aW9uLgogICAgICovCiAgICBmaXhBbnN3ZXI6IGZ1bmN0aW9uIGZpeEFuc3dlcihhbnN3ZXIpIHsKICAgICAgcmV0dXJuIGFuc3dlcjsKICAgIH0sCiAgICBnZXRFbGVtZW50OiBmdW5jdGlvbiBnZXRFbGVtZW50KCkgewogICAgICB2YXIgZWwgPSB0aGlzLiRyZWZzLmlucHV0OyAvLyBTb21ldGltZXMgdGhlIGlucHV0IGlzIG5lc3RlZCBzbyB3ZSBuZWVkIHRvIGZpbmQgaXQKCiAgICAgIHdoaWxlIChlbCAmJiBlbC4kZWwpIHsKICAgICAgICBlbCA9IGVsLiRlbDsKICAgICAgfQoKICAgICAgcmV0dXJuIGVsOwogICAgfSwKICAgIHNldEZvY3VzOiBmdW5jdGlvbiBzZXRGb2N1cygpIHsKICAgICAgdGhpcy5mb2N1c2VkID0gdHJ1ZTsKICAgIH0sCiAgICAvLyBlc2xpbnQtZGlzYWJsZS1uZXh0LWxpbmUgbm8tdW51c2VkLXZhcnMKICAgIHVuc2V0Rm9jdXM6IGZ1bmN0aW9uIHVuc2V0Rm9jdXMoJGV2ZW50KSB7CiAgICAgIHRoaXMuZm9jdXNlZCA9IGZhbHNlOwogICAgfSwKICAgIGZvY3VzOiBmdW5jdGlvbiBmb2N1cygpIHsKICAgICAgaWYgKCF0aGlzLmZvY3VzZWQpIHsKICAgICAgICB2YXIgZWwgPSB0aGlzLmdldEVsZW1lbnQoKTsKICAgICAgICBlbCAmJiBlbC5mb2N1cygpOwogICAgICB9CiAgICB9LAogICAgYmx1cjogZnVuY3Rpb24gYmx1cigpIHsKICAgICAgdmFyIGVsID0gdGhpcy5nZXRFbGVtZW50KCk7CiAgICAgIGVsICYmIGVsLmJsdXIoKTsKICAgIH0sCiAgICBvbktleURvd246IGZ1bmN0aW9uIG9uS2V5RG93bigkZXZlbnQpIHsKICAgICAgdGhpcy5lbnRlclByZXNzZWQgPSBmYWxzZTsKICAgICAgY2xlYXJUaW1lb3V0KHRoaXMudGltZW91dElkKTsKCiAgICAgIGlmICgkZXZlbnQpIHsKICAgICAgICBpZiAoJGV2ZW50LmtleSA9PT0gJ0VudGVyJyAmJiAhJGV2ZW50LnNoaWZ0S2V5KSB7CiAgICAgICAgICB0aGlzLnVuc2V0Rm9jdXMoKTsKICAgICAgICB9CgogICAgICAgIGlmICh0aGlzLmFsbG93ZWRDaGFycyAhPT0gbnVsbCkgewogICAgICAgICAgLy8gQ2hlY2sgaWYgdGhlIGVudGVyZWQgY2hhcmFjdGVyIGlzIGFsbG93ZWQuCiAgICAgICAgICAvLyBXZSBhbHdheXMgYWxsb3cga2V5cyBmcm9tIHRoZSBhbHdheXNBbGxvd2VkS2V5cyBhcnJheS4KICAgICAgICAgIGlmICh0aGlzLmFsd2F5c0FsbG93ZWRLZXlzLmluZGV4T2YoJGV2ZW50LmtleSkgPT09IC0xICYmIHRoaXMuYWxsb3dlZENoYXJzLmluZGV4T2YoJGV2ZW50LmtleSkgPT09IC0xKSB7CiAgICAgICAgICAgICRldmVudC5wcmV2ZW50RGVmYXVsdCgpOwogICAgICAgICAgfQogICAgICAgIH0KICAgICAgfQogICAgfSwKICAgIG9uQ2hhbmdlOiBmdW5jdGlvbiBvbkNoYW5nZSgkZXZlbnQpIHsKICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7CiAgICAgIHRoaXMuZGF0YVZhbHVlID0gJGV2ZW50LnRhcmdldC52YWx1ZTsKICAgICAgdGhpcy5vbktleURvd24oKTsKICAgICAgdGhpcy5zZXRBbnN3ZXIodGhpcy5kYXRhVmFsdWUpOwogICAgfSwKICAgIG9uRW50ZXI6IGZ1bmN0aW9uIG9uRW50ZXIoKSB7CiAgICAgIHRoaXMuX29uRW50ZXIoKTsKICAgIH0sCiAgICBfb25FbnRlcjogZnVuY3Rpb24gX29uRW50ZXIoKSB7CiAgICAgIHRoaXMuZW50ZXJQcmVzc2VkID0gdHJ1ZTsKICAgICAgdGhpcy5kYXRhVmFsdWUgPSB0aGlzLmZpeEFuc3dlcih0aGlzLmRhdGFWYWx1ZSk7CiAgICAgIHRoaXMuc2V0QW5zd2VyKHRoaXMuZGF0YVZhbHVlKTsKICAgICAgdGhpcy5pc1ZhbGlkKCkgPyB0aGlzLmJsdXIoKSA6IHRoaXMuZm9jdXMoKTsKICAgIH0sCiAgICBzZXRBbnN3ZXI6IGZ1bmN0aW9uIHNldEFuc3dlcihhbnN3ZXIpIHsKICAgICAgdGhpcy5xdWVzdGlvbi5zZXRBbnN3ZXIoYW5zd2VyKTsKICAgICAgdGhpcy5hbnN3ZXIgPSB0aGlzLnF1ZXN0aW9uLmFuc3dlcjsKICAgICAgdGhpcy5xdWVzdGlvbi5hbnN3ZXJlZCA9IHRoaXMuaXNWYWxpZCgpOwogICAgICB0aGlzLiRlbWl0KCdpbnB1dCcsIHRoaXMuYW5zd2VyKTsKICAgIH0sCiAgICBzaG93SW52YWxpZDogZnVuY3Rpb24gc2hvd0ludmFsaWQoKSB7CiAgICAgIHJldHVybiB0aGlzLmRpcnR5ICYmIHRoaXMuZW50ZXJQcmVzc2VkICYmICF0aGlzLmlzVmFsaWQoKTsKICAgIH0sCiAgICBpc1ZhbGlkOiBmdW5jdGlvbiBpc1ZhbGlkKCkgewogICAgICBpZiAoIXRoaXMucXVlc3Rpb24ucmVxdWlyZWQgJiYgIXRoaXMuaGFzVmFsdWUgJiYgdGhpcy5kaXJ0eSkgewogICAgICAgIHJldHVybiB0cnVlOwogICAgICB9CgogICAgICBpZiAodGhpcy52YWxpZGF0ZSgpKSB7CiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0sCgogICAgLyoqCiAgICAgKiBUaGlzIG1ldGhvZCB2YWxpZGF0ZXMgdGhlIGlucHV0IGFuZCBpcyBtZWFudCB0byBiZSBvdmVycmlkZW4KICAgICAqIGluIGN1c3RvbSBxdWVzdGlvbiB0eXBlcy4KICAgICAqLwogICAgdmFsaWRhdGU6IGZ1bmN0aW9uIHZhbGlkYXRlKCkgewogICAgICByZXR1cm4gIXRoaXMucXVlc3Rpb24ucmVxdWlyZWQgfHwgdGhpcy5oYXNWYWx1ZTsKICAgIH0KICB9LAogIGNvbXB1dGVkOiB7CiAgICBwbGFjZWhvbGRlcjogZnVuY3Rpb24gcGxhY2Vob2xkZXIoKSB7CiAgICAgIHJldHVybiB0aGlzLnF1ZXN0aW9uLnBsYWNlaG9sZGVyIHx8IHRoaXMubGFuZ3VhZ2UucGxhY2Vob2xkZXI7CiAgICB9LAogICAgaGFzVmFsdWU6IGZ1bmN0aW9uIGhhc1ZhbHVlKCkgewogICAgICBpZiAodGhpcy5kYXRhVmFsdWUgIT09IG51bGwpIHsKICAgICAgICB2YXIgdiA9IHRoaXMuZGF0YVZhbHVlOwoKICAgICAgICBpZiAodi50cmltKSB7CiAgICAgICAgICAvLyBEb24ndCBhbGxvdyBlbXB0eSBzdHJpbmdzCiAgICAgICAgICByZXR1cm4gdi50cmltKCkubGVuZ3RoID4gMDsKICAgICAgICB9CgogICAgICAgIGlmIChBcnJheS5pc0FycmF5KHYpKSB7CiAgICAgICAgICAvLyBEb24ndCBhbGxvdyBlbXB0eSBhcnJheXMKICAgICAgICAgIHJldHVybiB2Lmxlbmd0aCA+IDA7CiAgICAgICAgfSAvLyBBbGwgb3RoZXIgbm9uLW51bGwgdmFsdWVzIGFyZSBhbGxvd2VkIHRvIHBhc3MgdGhyb3VnaAoKCiAgICAgICAgcmV0dXJuIHRydWU7CiAgICAgIH0KCiAgICAgIHJldHVybiBmYWxzZTsKICAgIH0KICB9Cn07"},{"version":3,"sources":["BaseType.vue"],"names":[],"mappings":"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","sourcesContent":["// Used as the basis and extended by other Question Type components\n\n<script>\n  /*\n    Copyright (c) 2020 - present, DITDOT Ltd. - MIT Licence\n    https://github.com/ditdot-dev/vue-flow-form\n    https://www.ditdot.hr/en\n  */\n\n  import QuestionModel from '../../models/QuestionModel'\n  import LanguageModel from '../../models/LanguageModel'\n  import { IsMobile } from '../../mixins/IsMobile'\n\n  export default {\n    name: 'FlowFormBaseType',\n    props: {\n      language: LanguageModel,\n      question: QuestionModel,\n      active: Boolean,\n      value: [String, Array, Boolean, Number, Object, FileList]\n    },\n    mixins: [\n      IsMobile,\n    ],\n    data() {\n      return {\n        dirty: false,\n        dataValue: null,\n        answer: null,\n        enterPressed: false,\n        allowedChars: null,\n        alwaysAllowedKeys: ['ArrowLeft', 'ArrowRight', 'Delete', 'Backspace'],\n        focused: false,\n        canReceiveFocus: false\n      }\n    },\n    mounted() {\n      if (this.question.answer) {\n        this.dataValue = this.answer = this.question.answer\n      } else if (this.question.multiple) {\n        this.dataValue = []\n      }\n    },\n    methods: {\n      /**\n       * This method can be overriden in custom components to \n       * change the answer before going through validation.\n       */\n      fixAnswer(answer) {\n        return answer\n      },\n\n      getElement() {\n        let el = this.$refs.input\n\n        // Sometimes the input is nested so we need to find it\n        while (el && el.$el) {\n          el = el.$el\n        }\n\n        return el\n      },\n\n      setFocus() {\n        this.focused = true\n      },\n\n      // eslint-disable-next-line no-unused-vars\n      unsetFocus($event) {\n        this.focused = false\n      },\n\n      focus() {\n        if (!this.focused) {\n          const el = this.getElement()\n\n          el && el.focus()\n        }\n      },\n\n      blur() {\n        const el = this.getElement()\n\n        el && el.blur()\n      },\n\n      onKeyDown($event) {\n        this.enterPressed = false\n        clearTimeout(this.timeoutId)\n\n        if ($event) {\n          if ($event.key === 'Enter' && !$event.shiftKey) {\n            this.unsetFocus()\n          }\n\n          if (this.allowedChars !== null) {\n            // Check if the entered character is allowed.\n            // We always allow keys from the alwaysAllowedKeys array.\n            if (this.alwaysAllowedKeys.indexOf($event.key) === -1 && this.allowedChars.indexOf($event.key) === -1) {\n              $event.preventDefault()\n            }\n          }\n        }\n      },\n\n      onChange($event) {\n        this.dirty = true\n        this.dataValue = $event.target.value\n\n        this.onKeyDown()\n        this.setAnswer(this.dataValue)\n      },\n\n      onEnter() {\n        this._onEnter()\n      },\n\n      _onEnter() {\n        this.enterPressed = true\n\n        this.dataValue = this.fixAnswer(this.dataValue)\n        this.setAnswer(this.dataValue)\n        this.isValid() ? this.blur() : this.focus()\n      },\n\n      setAnswer(answer) {\n        this.question.setAnswer(answer)\n\n        this.answer = this.question.answer\n        this.question.answered = this.isValid()\n\n        this.$emit('input', this.answer)\n      },\n\n      showInvalid() {\n        return this.dirty && this.enterPressed && !this.isValid()\n      },\n\n      isValid() {\n        if (!this.question.required && !this.hasValue && this.dirty) {\n          return true\n        }\n\n        if (this.validate()) {\n          return true\n        }\n\n        return false\n      },\n      \n      /**\n       * This method validates the input and is meant to be overriden\n       * in custom question types.\n       */\n      validate() {\n        return !this.question.required || this.hasValue\n      }\n    },\n    \n    computed: {\n      placeholder() {\n        return this.question.placeholder || this.language.placeholder\n      },\n\n      hasValue() {\n        if (this.dataValue !== null) {\n          let v = this.dataValue\n\n          if (v.trim) {\n            // Don't allow empty strings\n            return v.trim().length > 0\n          }\n\n          if (Array.isArray(v)) {\n            // Don't allow empty arrays\n            return v.length > 0\n          }\n\n          // All other non-null values are allowed to pass through\n          return true\n        }\n\n        return false\n      }\n    }\n  }\n</script>\n\n<style></style>"],"sourceRoot":"src/components/QuestionTypes"}]}