{"remainingRequest":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/babel-loader/lib/index.js!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/FlowForm.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/FlowForm.vue","mtime":1635747848179},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/babel-loader/lib/index.js","mtime":1627740747092},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["FlowForm.vue"],"names":[],"mappings":"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","sourcesContent":["// Form template and logic\n\n<template>\n  <div class=\"vff\" :class=\"{'vff-not-standalone': !standalone, 'vff-is-mobile': isMobile, 'vff-is-ios': isIos}\">\n    <div class=\"f-container\">\n      <div class=\"f-form-wrap\">\n        <flow-form-question\n          ref=\"questions\"\n          v-for=\"(q, index) in questionList\"\n          v-bind:question=\"q\"\n          v-bind:language=\"language\"\n          v-bind:key=\"'q' + index\"\n          v-bind:active=\"q.index === activeQuestionIndex\"\n          v-model=\"q.answer\"\n          v-on:answer=\"onQuestionAnswered\"\n          v-bind:reverse=\"reverse\"\n        />\n\n        <slot></slot>\n\n        <!-- Complete/Submit screen slots -->   \n        <div v-if=\"isOnLastStep\" class=\"vff-animate f-fade-in-up field-submittype\">\n          <slot name=\"complete\">\n            <!-- Default content for the \"complete\" slot -->\n            <div class=\"f-section-wrap\">\n              <p>\n                <span class=\"fh2\">{{ language.thankYouText }}</span>\n              </p>\n            </div>\n          </slot>\n\n          <slot name=\"completeButton\">\n            <!-- Default content for the \"completeButton\" slot -->\n            <button \n              class=\"o-btn-action\"\n              ref=\"button\" \n              type=\"button\" \n              href=\"#\" \n              v-on:click.prevent=\"submit()\" \n              v-if=\"!submitted\"\n              v-bind:aria-label=\"language.ariaSubmitText\">\n                <span>{{ language.submitText }}</span>\n            </button>\n            <a \n              class=\"f-enter-desc\"\n              href=\"#\"\n              v-on:click.prevent=\"submit()\"\n              v-if=\"!submitted\"\n              v-html=\"language.formatString(language.pressEnter)\">\n            </a>\n            <p class=\"text-success\" v-if=\"submitted\">{{ language.successText }}</p>\n          </slot>\n        </div>\n      </div>\n    </div>\n\n    <div class=\"vff-footer\">\n      <div class=\"footer-inner-wrap\">\n        <div v-if=\"progressbar\" class=\"f-progress\" v-bind:class=\"{'not-started': percentCompleted === 0, 'completed': percentCompleted === 100}\">\n          <div class=\"f-progress-bar\">\n            <div class=\"f-progress-bar-inner\" v-bind:style=\"'width: ' + percentCompleted + '%;'\"></div>\n          </div>\n          {{ language.percentCompleted.replace(':percent', percentCompleted) }}\n        </div>\n        <div v-if=\"navigation\" class=\"f-nav\">\n          <a\n            class=\"f-prev\"\n            href=\"#\"\n            v-bind:class=\"{'f-disabled': activeQuestionIndex === 0 || submitted}\"\n            v-on:click.prevent=\"goToPreviousQuestion()\"\n            role=\"button\"\n            v-bind:aria-label=\"language.ariaPrev\"\n          >\n            <svg\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n              x=\"0px\"\n              y=\"0px\"\n              width=\"42.333px\"\n              height=\"28.334px\"\n              viewBox=\"78.833 5.5 42.333 28.334\"\n              aria-hidden=\"true\"\n            >\n              <path\n                d=\"M82.039,31.971L100,11.442l17.959,20.529L120,30.187L101.02,8.492c-0.258-0.295-0.629-0.463-1.02-0.463c-0.39,0-0.764,0.168-1.02,0.463L80,30.187L82.039,31.971z\"\n              />\n            </svg>\n            <span class=\"f-nav-text\" aria-hidden=\"true\">{{ language.prev }}</span>\n          </a>\n          <a\n            class=\"f-next\"\n            href=\"#\"\n            v-bind:class=\"{'f-disabled': !isNextQuestionAvailable()}\"\n            v-on:click.prevent=\"goToNextQuestion()\"\n            role=\"button\"\n            v-bind:aria-label=\"language.ariaNext\"\n          >\n            <svg\n              version=\"1.1\"\n              xmlns=\"http://www.w3.org/2000/svg\"\n              xmlns:xlink=\"http://www.w3.org/1999/xlink\"\n              x=\"0px\"\n              y=\"0px\"\n              width=\"42.333px\"\n              height=\"28.334px\"\n              viewBox=\"78.833 5.5 42.333 28.334\"\n              aria-hidden=\"true\"\n            >\n              <path\n                d=\"M117.963,8.031l-17.961,20.529L82.042,8.031l-2.041,1.784l18.98,21.695c0.258,0.295,0.629,0.463,1.02,0.463c0.39,0,0.764-0.168,1.02-0.463l18.98-21.695L117.963,8.031z\"\n              />\n            </svg>\n            <span class=\"f-nav-text\" aria-hidden=\"true\">{{ language.next }}</span>\n          </a>\n        </div>\n        <div v-if=\"timer\" class=\"f-timer\">\n          <span>{{ formatTime(time) }}</span>\n        </div>\n      </div>\n    </div>\n  </div>\n</template>\n\n<script>\n  /*!\n    Copyright (c) 2020 - present, DITDOT Ltd. - MIT Licence\n    https://github.com/ditdot-dev/vue-flow-form\n    https://www.ditdot.hr/en\n  */\n\n  import FlowFormQuestion from './FlowFormQuestion.vue'\n  import QuestionModel, { ChoiceOption, LinkOption, QuestionType } from '../models/QuestionModel'\n  import LanguageModel from '../models/LanguageModel'\n  import { IsMobile } from '../mixins/IsMobile'\n\n  export default {\n    name: 'FlowForm',\n    components: {\n      FlowFormQuestion\n    },\n    \n    props: {\n      questions: {\n        type: Array,\n        validator: value => value.every(q => q instanceof QuestionModel)\n      }, \n      language: {\n        type: LanguageModel,\n        default: () => new LanguageModel()\n      },\n      progressbar: {\n        type: Boolean, \n        default: true\n      },\n      standalone: {\n        type: Boolean, \n        default: true\n      },\n      navigation: {\n        type: Boolean, \n        default: true\n      },\n      timer: {\n        type: Boolean,\n        default: false\n      },\n      timerStartStep: [String, Number],\n      timerStopStep: [String, Number]\n    },\n\n    mixins: [\n      IsMobile,\n    ],\n\n    data() {\n      return {\n        completed: false,\n        submitted: false,\n        activeQuestionIndex: 0,\n        questionList: [],\n        questionListActivePath: [],\n        reverse: false,\n        timerOn: false,\n        timerInterval: null,\n        time: 0\n      }\n    },\n\n    mounted() {\n      document.addEventListener('keydown', this.onKeyDownListener)\n      document.addEventListener('keyup', this.onKeyUpListener, true)\n      window.addEventListener('beforeunload', this.onBeforeUnload)\n\n      this.setQuestions()\n      this.checkTimer()\n    },\n\n    beforeDestroy() {\n      document.removeEventListener('keydown', this.onKeyDownListener)\n      document.removeEventListener('keyup', this.onKeyUpListener, true)\n      window.removeEventListener('beforeunload', this.onBeforeUnload)\n      \n      this.stopTimer()\n    },\n\n    computed: {\n      numActiveQuestions() {\n        return this.questionListActivePath.length\n      },\n\n      activeQuestion() {\n        return this.questionListActivePath[this.activeQuestionIndex]\n      },\n\n      activeQuestionId() {\n        const question = this.questionModels[this.activeQuestionIndex]\n\n        if (this.isOnLastStep) {\n          return '_submit'\n        }\n\n        if (question && question.id) {\n          return question.id\n        }\n\n        return null\n      },\n\n      numCompletedQuestions() {\n        let num = 0\n\n        this.questionListActivePath.forEach(question => {\n          if (question.answered) {\n            ++num\n          }\n        })\n\n        return num\n      },\n\n      percentCompleted() {\n        if (!this.numActiveQuestions) {\n          return 0\n        }\n\n        return Math.floor((this.numCompletedQuestions / this.numActiveQuestions) * 100)\n      },\n\n      isOnLastStep() {\n        return this.numActiveQuestions > 0 && this.activeQuestionIndex === this.questionListActivePath.length\n      }, \n\n      isOnTimerStartStep() {\n        if (this.activeQuestionId === this.timerStartStep) {\n          return true\n        }\n\n        if (!this.timerOn && !this.timerStartStep && this.activeQuestionIndex === 0) {\n          return true\n        }\n\n        return false\n      },\n\n      isOnTimerStopStep() {\n        if (this.submitted) {\n          return true\n        }\n        \n        if (this.activeQuestionId === this.timerStopStep) {\n          return true \n        }\n\n        return false\n      },\n\n      questionModels: {\n        cache: false,\n\n        get() {\n          if (this.questions && this.questions.length) {\n            return this.questions\n          }\n\n          const questions = []\n\n          if (!this.questions) {\n            const classMap = {\n              'options': ChoiceOption,\n              'descriptionLink': LinkOption\n            }\n\n            this\n              .$slots\n              .default\n              .filter(q => q.tag && q.tag.indexOf('Question') !== -1)\n              .forEach(q => {\n                const attrs = q.data.attrs\n                let model = new QuestionModel()\n\n                if (q.componentInstance.question !== null) {\n                  model = q.componentInstance.question\n                } \n\n                if (q.data.model) {\n                  model.answer = q.data.model.value\n                }\n\n                Object.keys(model).forEach(key => {\n                  if (attrs[key] !== undefined) {\n                    if (typeof model[key] === 'boolean') {\n                      model[key] = attrs[key] !== false\n                    } else if (key in classMap) {\n                      const\n                        classReference = classMap[key],\n                        options = []\n\n                      attrs[key].forEach(option => {\n                        const instance = new classReference()\n\n                        Object.keys(instance).forEach(instanceKey => {\n                          if (option[instanceKey] !== undefined) {\n                            instance[instanceKey] = option[instanceKey]\n                          }\n                        })\n\n                        options.push(instance)\n                      })\n\n                      model[key] = options\n                    } else {\n                      switch(key) {\n                        case 'type':\n                          if (Object.values(QuestionType).indexOf(attrs[key]) !== -1) {\n                            model[key] = attrs[key]\n                          } else {\n                            for (const questionTypeKey in QuestionType) {\n                              if (questionTypeKey.toLowerCase() === attrs[key].toLowerCase()) {\n                                model[key] = QuestionType[questionTypeKey]\n                                break\n                              }\n                            }\n                          }\n                          break\n\n                        default:\n                          model[key] = attrs[key]\n                          break\n                      }\n                    }\n                  }\n                })\n\n                q.componentInstance.question = model\n\n                model.resetOptions()\n\n                questions.push(model)\n              })\n          }\n\n          return questions\n        }\n      }\n    },\n\n    methods: {\n      /**\n       * Returns currently active question component (if any).\n       */\n      activeQuestionComponent() {\n        if (this.$refs.questions) {\n          return this.$refs.questions[this.activeQuestionIndex]\n        }\n\n        return null\n      },\n\n      setQuestions() {\n        this.setQuestionListActivePath()\n        this.setQuestionList()\n      },\n\n      /**\n       * This method goes through all questions and sets the ones\n       * that are in the current path (taking note of logic jumps)\n       */\n      setQuestionListActivePath() {\n        const questions = []\n\n        if (!this.questionModels.length) {\n          return\n        }\n\n        let\n          index = 0,\n          serialIndex = 0,\n          nextId\n\n        do {\n          let question = this.questionModels[index]\n\n          question.setIndex(serialIndex)\n          question.language = this.language\n\n          questions.push(question)\n\n          if (!question.jump) {\n            ++index\n          } else if (question.answered) {\n            nextId = question.getJumpId()\n            if (nextId) {\n              if (nextId === '_submit') {\n                index = this.questionModels.length\n              } else {\n                for (let i = 0; i < this.questionModels.length; i++) {\n                  if (this.questionModels[i].id === nextId) {\n                    index = i\n                    break\n                  }\n                }\n              }\n            } else {\n              ++index\n            }\n          } else {\n            index = this.questionModels.length\n          }\n\n          ++serialIndex\n        } while (index < this.questionModels.length)\n\n        this.questionListActivePath = questions\n      },\n\n      /**\n       * Sets the question list array\n       * (all questions up to, and including, the current one)\n       */\n      setQuestionList() {\n        const questions = []\n\n        for (let index = 0; index < this.questionListActivePath.length; index++) {\n          const question = this.questionListActivePath[index]\n\n          questions.push(question)\n\n          if (!question.answered) {\n            if (this.completed) {\n              // The \"completed\" status changed - user probably changed an\n              // already entered answer.\n              this.completed = false\n            }\n            break\n          }\n        }\n\n        this.questionList = questions\n      },\n\n      /**\n       * If we have any answered questions, notify user before leaving\n       * the page.\n       */\n      onBeforeUnload(event) {\n        if (this.activeQuestionIndex > 0 && !this.submitted) {\n          event.preventDefault()\n          event.returnValue = ''\n        }\n      },\n\n      /**\n       * Global key listeners, listen for Enter or Tab key events.\n       */\n      onKeyDownListener(e) {\n        if (e.key !== 'Tab' || this.submitted) {\n          return\n        }\n\n        if (e.shiftKey) {\n          e.stopPropagation()\n          e.preventDefault()\n\n          if (this.navigation) {\n            this.goToPreviousQuestion()\n          }\n        } else {\n          const q = this.activeQuestionComponent()\n\n          if (q.shouldFocus()) {\n            e.preventDefault()\n\n            q.focusField()\n          } else {\n            e.stopPropagation()\n\n            this.emitTab()\n            this.reverse = false\n          }\n        }\n      }, \n\n      onKeyUpListener(e) {\n        if (e.shiftKey || ['Tab', 'Enter'].indexOf(e.key) === -1 || this.submitted) {\n          return\n        }\n\n        const q = this.activeQuestionComponent()\n\n        if (e.key === 'Tab' && q.shouldFocus()) {\n          q.focusField()\n        } else {\n          if (e.key === 'Enter') {\n            this.emitEnter()\n          } \n\n          e.stopPropagation()\n          this.reverse = false\n        }\n      },\n\n      emitEnter() {\n        const q = this.activeQuestionComponent()\n\n        if (q) {\n          // Send enter event to the current question component\n          q.onEnter()\n        } else if (this.completed && this.isOnLastStep) {\n          // We're finished - submit form\n          this.submit()\n        }\n      },\n\n      emitTab() {\n        const q = this.activeQuestionComponent()\n\n        if (q) {\n          // Send tab event to the current question component\n          q.onTab()\n        } else {\n          this.emitEnter()\n        }\n      },\n\n      submit() {\n        this.emitSubmit()\n        this.submitted = true\n      },\n\n      emitComplete() {\n        this.$emit('complete', this.completed, this.questionList)\n      },\n\n      emitSubmit() {\n        this.$emit('submit', this.questionList)\n      },\n\n      /**\n       * Checks if we have another question and if we\n       * can jump to it.\n       */\n      isNextQuestionAvailable() {\n        if (this.submitted) {\n          return false\n        }\n\n        const q = this.activeQuestion\n        if (q && !q.required) {\n          return true\n        }\n\n        if (this.completed && !this.isOnLastStep) {\n          return true\n        }\n   \n        return this.activeQuestionIndex < this.questionList.length - 1\n      },\n\n      /**\n       * Triggered by the \"answer\" event in the Question component\n       */\n      onQuestionAnswered(question) {\n        if (question.isValid()) {\n          this.$emit('answer', question.question)\n\n          if (this.activeQuestionIndex < this.questionListActivePath.length) {\n            ++this.activeQuestionIndex\n          }\n         \n          this.$nextTick(() => {\n            this.setQuestions()\n            this.checkTimer()\n            // Nested $nextTick so we're 100% sure that setQuestions\n            // actually updated the question array\n            this.$nextTick(() => {\n              const q = this.activeQuestionComponent()\n\n              if (q) {\n                q.focusField()\n                this.activeQuestionIndex = q.question.index\n              } else if (this.isOnLastStep) {\n                // No more questions left - set \"completed\" to true\n                this.completed = true\n                this.activeQuestionIndex = this.questionListActivePath.length\n                \n                this.$refs.button && this.$refs.button.focus()\n              }\n\n              this.$emit('step', this.activeQuestionId, this.activeQuestion)\n            })\n          })\n        } else if (this.completed) {\n          this.completed = false\n        }\n      },\n\n      /**\n       * Jumps to previous question.\n       */\n      goToPreviousQuestion() {\n        this.blurFocus()\n    \n        if (this.activeQuestionIndex > 0 && !this.submitted) {\n          if (this.isOnTimerStopStep) {\n            this.startTimer()\n          }\n\n          --this.activeQuestionIndex\n\n          this.reverse = true\n\n          this.checkTimer()\n        }\n      },\n\n      /**\n       * Jumps to next question.\n       */\n      goToNextQuestion() {\n        this.blurFocus()\n        if (this.isNextQuestionAvailable()) {\n          this.emitEnter()\n        }\n\n        this.reverse = false\n      },\n\n      /**\n       * Removes focus from the currently focused DOM element.\n       */\n      blurFocus() {\n        document.activeElement && document.activeElement.blur && document.activeElement.blur()\n      },\n\n      checkTimer() {\n        if (this.timer) {\n          if (this.isOnTimerStartStep) {\n            this.startTimer()\n          } else if (this.isOnTimerStopStep) {\n            this.stopTimer()\n          }\n        }\n      },\n\n      startTimer() {\n        if (this.timer && !this.timerOn) {\n          this.timerInterval = setInterval(this.incrementTime, 1000)\n          this.timerOn = true\n        }\n      },\n\n      stopTimer() {\n        if (this.timerOn) {\n          clearInterval(this.timerInterval)\n        }\n\n        this.timerOn = false\n      },\n\n      incrementTime() {\n        ++this.time\n        \n        this.$emit('timer', this.time, this.formatTime(this.time))\n      },\n\n      formatTime(seconds) {\n        let\n          startIndex = 14,\n          length = 5\n            \n        if (seconds >= 60 * 60) {\n          startIndex = 11\n          length = 8\n        }\n\n        return new Date(1000 * seconds).toISOString().substr(startIndex, length)\n      }\n    },\n\n    watch: {\n      completed() {\n        this.emitComplete()\n      },\n      \n      submitted() {\n        this.stopTimer()\n      }\n    }\n  }\n</script>\n\n<style lang=\"css\">\n  @import '../assets/css/common.css';\n</style>"],"sourceRoot":"src/components"}]}