{"remainingRequest":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/babel-loader/lib/index.js!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/Question.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/Question.vue","mtime":1634624504807},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/babel-loader/lib/index.js","mtime":1627740747092},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5mb3ItZWFjaC5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmpvaW4uanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5vYmplY3QudG8tc3RyaW5nLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvZXMuc3RyaW5nLml0ZXJhdG9yLmpzIjsKaW1wb3J0ICJjb3JlLWpzL21vZHVsZXMvd2ViLmRvbS1jb2xsZWN0aW9ucy5pdGVyYXRvci5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL3dlYi51cmwuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy93ZWIudXJsLXNlYXJjaC1wYXJhbXMuanMiOwppbXBvcnQgImNvcmUtanMvbW9kdWxlcy9lcy5hcnJheS5zbGljZS5qcyI7CmltcG9ydCAiY29yZS1qcy9tb2R1bGVzL2VzLmFycmF5LmNvbmNhdC5qcyI7Ci8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vCi8vIElmIHVzaW5nIHRoZSBucG0gcGFja2FnZSwgdXNlIHRoZSBmb2xsb3dpbmcgbGluZSBpbnN0ZWFkIG9mIHRoZSBvbmVzIGFib3ZlLgppbXBvcnQgRmxvd0Zvcm0sIHsgUXVlc3Rpb25Nb2RlbCwgUXVlc3Rpb25UeXBlLCBDaG9pY2VPcHRpb24sIExhbmd1YWdlTW9kZWwgfSBmcm9tICJAZGl0ZG90LWRldi92dWUtZmxvdy1mb3JtIjsKaW1wb3J0IHsgVnVlUmVjb3JkQXVkaW8gfSBmcm9tICJAY29kZWtyYWZ0LXN0dWRpby92dWUtcmVjb3JkIjsKaW1wb3J0IE9wdXNNZWRpYVJlY29yZGVyIGZyb20gIm9wdXMtbWVkaWEtcmVjb3JkZXIiOyAvLyBVc2Ugd29ya2VyLWxvYWRlcgoKaW1wb3J0IEVuY29kZXJXb3JrZXIgZnJvbSAid29ya2VyLWxvYWRlciFvcHVzLW1lZGlhLXJlY29yZGVyL2VuY29kZXJXb3JrZXIuanMiOwpleHBvcnQgZGVmYXVsdCB7CiAgY29tcG9uZW50czogewogICAgRmxvd0Zvcm06IEZsb3dGb3JtLAogICAgVnVlUmVjb3JkQXVkaW86IFZ1ZVJlY29yZEF1ZGlvCiAgfSwKICBkYXRhOiBmdW5jdGlvbiBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgc3VibWl0dGVkOiBmYWxzZSwKICAgICAgY29tcGxldGVkOiBmYWxzZSwKICAgICAgYXR0YWNoRmlsZTogbnVsbCwKICAgICAgcmVjb3JkaW5nOiBmYWxzZSwKICAgICAgcmVjb3JkZXI6IG51bGwsCiAgICAgIHJlY29yZEZpbGU6IG51bGwsCiAgICAgIGxhbmd1YWdlOiBuZXcgTGFuZ3VhZ2VNb2RlbCh7CiAgICAgICAgZW50ZXJLZXk6IHRoaXMuJHQoImVudGVyS2V5IiksCiAgICAgICAgc2hpZnRLZXk6IHRoaXMuJHQoInNoaWZ0S2V5IiksCiAgICAgICAgb2s6IHRoaXMuJHQoIm9rIiksCiAgICAgICAgY29udGludWU6IHRoaXMuJHQoImNvbnRpbnVlIiksCiAgICAgICAgc2tpcDogdGhpcy4kdCgic2tpcCIpLAogICAgICAgIHByZXNzRW50ZXI6IHRoaXMuJHQoInByZXNzRW50ZXIiKSwKICAgICAgICBtdWx0aXBsZUNob2ljZUhlbHBUZXh0OiB0aGlzLiR0KCJtdWx0aXBsZUNob2ljZUhlbHBUZXh0IiksCiAgICAgICAgbXVsdGlwbGVDaG9pY2VIZWxwVGV4dFNpbmdsZTogdGhpcy4kdCgibXVsdGlwbGVDaG9pY2VIZWxwVGV4dFNpbmdsZSIpLAogICAgICAgIG90aGVyUHJvbXB0OiB0aGlzLiR0KCJvdGhlclByb21wdCIpLAogICAgICAgIHBsYWNlaG9sZGVyOiB0aGlzLiR0KCJwbGFjZWhvbGRlciIpLAogICAgICAgIHN1Ym1pdFRleHQ6IHRoaXMuJHQoInN1Ym1pdFRleHQiKSwKICAgICAgICBsb25nVGV4dEhlbHBUZXh0OiB0aGlzLiR0KCJsb25nVGV4dEhlbHBUZXh0IiksCiAgICAgICAgcHJldjogdGhpcy4kdCgicHJldiIpLAogICAgICAgIG5leHQ6IHRoaXMuJHQoIm5leHQiKSwKICAgICAgICBwZXJjZW50Q29tcGxldGVkOiB0aGlzLiR0KCJwZXJjZW50Q29tcGxldGVkIiksCiAgICAgICAgaW52YWxpZFByb21wdDogdGhpcy4kdCgiaW52YWxpZFByb21wdCIpLAogICAgICAgIHRoYW5rWW91VGV4dDogdGhpcy4kdCgidGhhbmtZb3VUZXh0IiksCiAgICAgICAgc3VjY2Vzc1RleHQ6IHRoaXMuJHQoInN1Y2Nlc3NUZXh0IiksCiAgICAgICAgYXJpYU9rOiB0aGlzLiR0KCJhcmlhT2siKSwKICAgICAgICBhcmlhUmVxdWlyZWQ6IHRoaXMuJHQoImFyaWFSZXF1aXJlZCIpLAogICAgICAgIGFyaWFQcmV2OiB0aGlzLiR0KCJhcmlhUHJldiIpLAogICAgICAgIGFyaWFOZXh0OiB0aGlzLiR0KCJhcmlhTmV4dCIpLAogICAgICAgIGFyaWFTdWJtaXRUZXh0OiB0aGlzLiR0KCJhcmlhU3VibWl0VGV4dCIpLAogICAgICAgIGFyaWFNdWx0aXBsZUNob2ljZTogdGhpcy4kdCgiYXJpYU11bHRpcGxlQ2hvaWNlIiksCiAgICAgICAgYXJpYVR5cGVBbnN3ZXI6IHRoaXMuJHQoImFyaWFUeXBlQW5zd2VyIikKICAgICAgfSksCiAgICAgIHF1ZXN0aW9uczogW25ldyBRdWVzdGlvbk1vZGVsKHsKICAgICAgICBpZDogImZpcnN0X25hbWUiLAogICAgICAgIHRhZ2xpbmU6ICJIaSEgV2VsY29tZSB0byBvdXIgZGVtbyBzdXJ2ZXkg8J+YiiIsCiAgICAgICAgdGl0bGU6ICJXaGF0IGlzIHlvdXIgZmlyc3QgbmFtZT8iLAogICAgICAgIHR5cGU6IFF1ZXN0aW9uVHlwZS5UZXh0LAogICAgICAgIHBsYWNlaG9sZGVyOiAiU3RhcnQgdHlwaW5nIGhlcmUuLi4iCiAgICAgIH0pLCBuZXcgUXVlc3Rpb25Nb2RlbCh7CiAgICAgICAgaWQ6ICJlbWFpbCIsCiAgICAgICAgdGFnbGluZTogIk5pY2UgdG8gbWVldCB5b3Ug8J+RgCwgbGV0J3MgY29udGludWUiLAogICAgICAgIHRpdGxlOiAiUHJvdmlkZSBhbiBleGFtcGxlIGVtYWlsLiIsCiAgICAgICAgdHlwZTogUXVlc3Rpb25UeXBlLkVtYWlsLAogICAgICAgIHBsYWNlaG9sZGVyOiAiU3RhcnQgdHlwaW5nIGhlcmUuLi4iCiAgICAgIH0pLCBuZXcgUXVlc3Rpb25Nb2RlbCh7CiAgICAgICAgaWQ6ICJwaG9uZSIsCiAgICAgICAgdGl0bGU6ICJEb2luZyBncmVhdCEg8J+RjSBHbyBhaGVhZCBhbmQgdHJ5IHdpdGggYSBwaG9uZSBudW1iZXIuIiwKICAgICAgICB0eXBlOiBRdWVzdGlvblR5cGUuUGhvbmUsCiAgICAgICAgbWFzazogIiMjIyMtIyMjLSMjIyIKICAgICAgfSksIG5ldyBRdWVzdGlvbk1vZGVsKHsKICAgICAgICBpZDogInBsYWNlX2Nob2ljZXMiLAogICAgICAgIHRpdGxlOiAiV2hlcmUgYXJlIHlvdSBmcm9tPyIsCiAgICAgICAgdHlwZTogUXVlc3Rpb25UeXBlLk11bHRpcGxlQ2hvaWNlLAogICAgICAgIG11bHRpcGxlOiBmYWxzZSwKICAgICAgICBoZWxwVGV4dDogIlNlbGVjdCB5b3VyIHBsYWNlLiDwn5GHIiwKICAgICAgICBvcHRpb25zOiBbbmV3IENob2ljZU9wdGlvbih7CiAgICAgICAgICBsYWJlbDogIlBhcmlzIgogICAgICAgIH0pLCBuZXcgQ2hvaWNlT3B0aW9uKHsKICAgICAgICAgIGxhYmVsOiAiTG9kb24iCiAgICAgICAgfSksIG5ldyBDaG9pY2VPcHRpb24oewogICAgICAgICAgbGFiZWw6ICJIZWxzaW5raSIKICAgICAgICB9KSwgbmV3IENob2ljZU9wdGlvbih7CiAgICAgICAgICBsYWJlbDogIkJlcmxpbiIKICAgICAgICB9KV0KICAgICAgfSldCiAgICB9OwogIH0sCiAgYmVmb3JlQ3JlYXRlOiBmdW5jdGlvbiBiZWZvcmVDcmVhdGUoKSB7CiAgICAvLyBDaGVjayBpZiBNZWRpYVJlY29yZGVyIGF2YWlsYWJsZS4KICAgIGlmICghd2luZG93Lk1lZGlhUmVjb3JkZXIpIHsKICAgICAgd2luZG93Lk1lZGlhUmVjb3JkZXIgPSBPcHVzTWVkaWFSZWNvcmRlcjsKICAgIH0KICB9LAogIG1ldGhvZHM6IHsKICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAqLwogICAgb25Db21wbGV0ZTogZnVuY3Rpb24gb25Db21wbGV0ZShjb21wbGV0ZWQsIHF1ZXN0aW9uTGlzdCkgewogICAgICAvLyBUaGlzIG1ldGhvZCBpcyBjYWxsZWQgd2hlbmV2ZXIgdGhlICJjb21wbGV0ZWQiIHN0YXR1cyBpcyBjaGFuZ2VkLgogICAgICB0aGlzLmNvbXBsZXRlZCA9IGNvbXBsZXRlZDsKICAgIH0sCgogICAgLyogZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzICovCiAgICBvblN1Ym1pdDogZnVuY3Rpb24gb25TdWJtaXQocXVlc3Rpb25MaXN0KSB7CiAgICAgIC8vIFRoaXMgbWV0aG9kIHdpbGwgb25seSBiZSBjYWxsZWQgaWYgeW91IGRvbid0IG92ZXJyaWRlIHRoZQogICAgICAvLyBjb21wbGV0ZUJ1dHRvbiBzbG90LgogICAgICAvLyB0aGlzLm9uU2VuZERhdGEoKQogICAgICBjb25zb2xlLmxvZygib25TdWJtaXQiKTsKICAgICAgdGhpcy5zdWJtaXR0ZWQgPSB0cnVlOwogICAgICBjb25zb2xlLmxvZyhxdWVzdGlvbkxpc3QpOwogICAgfSwKICAgIG9uU2VuZERhdGE6IGZ1bmN0aW9uIG9uU2VuZERhdGEoKSB7CiAgICAgIGNvbnNvbGUubG9nKCJva2VrZSBvblNlbmREYXRhIik7IC8vIFNldCBgc3VibWl0dGVkYCB0byB0cnVlIHNvIHRoZSBmb3JtIGtub3dzIG5vdCB0byBhbGxvdyBiYWNrL2ZvcndhcmQKICAgICAgLy8gbmF2aWdhdGlvbiBhbnltb3JlLgogICAgICAvLyB0aGlzLiRyZWZzLmZsb3dmb3JtLnN1Ym1pdCgpOwoKICAgICAgdGhpcy4kcmVmcy5mbG93Zm9ybS5zdWJtaXR0ZWQgPSB0cnVlOwogICAgICB0aGlzLnN1Ym1pdHRlZCA9IHRydWU7CiAgICAgIC8qIGVzbGludC1kaXNhYmxlLW5leHQtbGluZSBuby11bnVzZWQtdmFycyAqLwoKICAgICAgdmFyIGRhdGEgPSB0aGlzLmdldERhdGEoKTsKICAgICAgLyoKICAgICAgICAgIFlvdSBjYW4gdXNlIEZldGNoIEFQSSB0byBzZW5kIHRoZSBkYXRhIHRvIHlvdXIgc2VydmVyLCBlZy46CiAgICAgICAgICAgZmV0Y2godXJsLCB7CiAgICAgICAgICAgIG1ldGhvZDogJ1BPU1QnLAogICAgICAgICAgICBoZWFkZXJzOiB7CiAgICAgICAgICAgICAgJ0NvbnRlbnQtVHlwZSc6ICdhcHBsaWNhdGlvbi9qc29uJwogICAgICAgICAgICB9LAogICAgICAgICAgICBib2R5OiBKU09OLnN0cmluZ2lmeShkYXRhKQogICAgICAgICAgfSkKICAgICAgICAqLwogICAgfSwKICAgIGdldERhdGE6IGZ1bmN0aW9uIGdldERhdGEoKSB7CiAgICAgIHZhciBkYXRhID0gewogICAgICAgIHF1ZXN0aW9uczogW10sCiAgICAgICAgYW5zd2VyczogW10KICAgICAgfTsKICAgICAgdGhpcy5xdWVzdGlvbnMuZm9yRWFjaChmdW5jdGlvbiAocXVlc3Rpb24pIHsKICAgICAgICBpZiAocXVlc3Rpb24udGl0bGUpIHsKICAgICAgICAgIHZhciBhbnN3ZXIgPSBxdWVzdGlvbi5hbnN3ZXI7CgogICAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoYW5zd2VyKSkgewogICAgICAgICAgICBhbnN3ZXIgPSBhbnN3ZXIuam9pbigiLCAiKTsKICAgICAgICAgIH0KCiAgICAgICAgICBkYXRhLnF1ZXN0aW9ucy5wdXNoKHF1ZXN0aW9uLnRpdGxlKTsKICAgICAgICAgIGRhdGEuYW5zd2Vycy5wdXNoKGFuc3dlcik7CiAgICAgICAgfQogICAgICB9KTsKICAgICAgcmV0dXJuIGRhdGE7CiAgICB9LAogICAgb25TdHJlYW06IGZ1bmN0aW9uIG9uU3RyZWFtKHN0cmVhbSkgewogICAgICBjb25zb2xlLmxvZygiR290IGEgc3RyZWFtIG9iamVjdDoiLCBzdHJlYW0pOwogICAgfSwKICAgIG9uUmVzdWx0OiBmdW5jdGlvbiBvblJlc3VsdChkYXRhKSB7CiAgICAgIGNvbnNvbGUubG9nKCJvblJlc3VsdCIpOwogICAgICB2YXIgZmlsZVVSTCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtkYXRhXSkpOwogICAgICB2YXIgZmlsZUxpbmsgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCJhIik7CiAgICAgIGZpbGVMaW5rLmhyZWYgPSBmaWxlVVJMOwogICAgICB2YXIgbXlkYXRlID0gbmV3IERhdGUoKTsKICAgICAgdmFyIGN1cnJfZGF0ZSA9ICgiMCIgKyBteWRhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7CiAgICAgIHZhciBjdXJyX21vbnRoID0gKCIwIiArIChteWRhdGUuZ2V0TW9udGgoKSArIDEpKS5zbGljZSgtMik7CiAgICAgIHZhciBjdXJyX3llYXIgPSBteWRhdGUuZ2V0RnVsbFllYXIoKTsKICAgICAgdmFyIGN1cnJfaG91ciA9IG15ZGF0ZS5nZXRIb3VycygpOwogICAgICB2YXIgY3Vycl9taW51dGUgPSBteWRhdGUuZ2V0TWludXRlcygpOwogICAgICB2YXIgY3Vycl9zZWNvbmRzID0gbXlkYXRlLmdldFNlY29uZHMoKTsKICAgICAgdmFyIGZpbGVOYW1lID0gIiIuY29uY2F0KGN1cnJfeWVhcikuY29uY2F0KGN1cnJfbW9udGgpLmNvbmNhdChjdXJyX2RhdGUsICJfIikuY29uY2F0KGN1cnJfaG91cikuY29uY2F0KGN1cnJfbWludXRlKS5jb25jYXQoY3Vycl9zZWNvbmRzLCAiX3JlY29yZC53YXYiKTsKICAgICAgZmlsZUxpbmsuc2V0QXR0cmlidXRlKCJkb3dubG9hZCIsIGZpbGVOYW1lKTsKICAgICAgZG9jdW1lbnQuYm9keS5hcHBlbmRDaGlsZChmaWxlTGluayk7CiAgICAgIGZpbGVMaW5rLmNsaWNrKCk7CiAgICB9LAogICAgaGFuZGxlUmVjb3JkU2FmYXJpOiBmdW5jdGlvbiBoYW5kbGVSZWNvcmRTYWZhcmkoKSB7CiAgICAgIHZhciBfdGhpcyA9IHRoaXM7CgogICAgICB0aGlzLnJlY29yZGluZyA9ICF0aGlzLnJlY29yZGluZzsKCiAgICAgIGlmICh0aGlzLnJlY29yZGluZykgewogICAgICAgIGNvbnNvbGUubG9nKCJSZWNvcmRpbmciKTsgLy8gTm9uLXN0YW5kYXJkIG9wdGlvbnMKCiAgICAgICAgdmFyIHdvcmtlck9wdGlvbnMgPSB7CiAgICAgICAgICBlbmNvZGVyV29ya2VyRmFjdG9yeTogZnVuY3Rpb24gZW5jb2RlcldvcmtlckZhY3RvcnkoKSB7CiAgICAgICAgICAgIHJldHVybiBuZXcgRW5jb2RlcldvcmtlcigpOwogICAgICAgICAgfSwKICAgICAgICAgIE9nZ09wdXNFbmNvZGVyV2FzbVBhdGg6ICJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL29wdXMtbWVkaWEtcmVjb3JkZXJAbGF0ZXN0L09nZ09wdXNFbmNvZGVyLndhc20iLAogICAgICAgICAgV2ViTU9wdXNFbmNvZGVyV2FzbVBhdGg6ICJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL29wdXMtbWVkaWEtcmVjb3JkZXJAbGF0ZXN0L1dlYk1PcHVzRW5jb2Rlci53YXNtIgogICAgICAgIH07CiAgICAgICAgbmF2aWdhdG9yLm1lZGlhRGV2aWNlcy5nZXRVc2VyTWVkaWEoewogICAgICAgICAgYXVkaW86IHRydWUKICAgICAgICB9KS50aGVuKGZ1bmN0aW9uIChzdHJlYW0pIHsKICAgICAgICAgIC8vIFN0YXJ0IHJlY29yZGluZwogICAgICAgICAgX3RoaXMucmVjb3JkZXIgPSBuZXcgTWVkaWFSZWNvcmRlcihzdHJlYW0sIHt9LCB3b3JrZXJPcHRpb25zKTsgLy8gU2V0IHJlY29yZCB0byA8YXVkaW8+IHdoZW4gcmVjb3JkaW5nIHdpbGwgYmUgZmluaXNoZWQKCiAgICAgICAgICBfdGhpcy5yZWNvcmRlci5zdGFydCgpOwoKICAgICAgICAgIF90aGlzLnJlY29yZGVyLmFkZEV2ZW50TGlzdGVuZXIoImRhdGFhdmFpbGFibGUiLCBmdW5jdGlvbiAoZSkgewogICAgICAgICAgICBfdGhpcy5yZWNvcmRGaWxlID0gZS5kYXRhOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coIkVuZCByZWNvcmRpbmciKTsKICAgICAgICB2YXIgZmlsZVVSTCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFt0aGlzLnJlY29yZEZpbGVdKSk7CiAgICAgICAgdmFyIGZpbGVMaW5rID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgiYSIpOwogICAgICAgIGZpbGVMaW5rLmhyZWYgPSBmaWxlVVJMOwogICAgICAgIHZhciBteWRhdGUgPSBuZXcgRGF0ZSgpOwogICAgICAgIHZhciBjdXJyX2RhdGUgPSAoIjAiICsgbXlkYXRlLmdldERhdGUoKSkuc2xpY2UoLTIpOwogICAgICAgIHZhciBjdXJyX21vbnRoID0gKCIwIiArIChteWRhdGUuZ2V0TW9udGgoKSArIDEpKS5zbGljZSgtMik7CiAgICAgICAgdmFyIGN1cnJfeWVhciA9IG15ZGF0ZS5nZXRGdWxsWWVhcigpOwogICAgICAgIHZhciBjdXJyX2hvdXIgPSBteWRhdGUuZ2V0SG91cnMoKTsKICAgICAgICB2YXIgY3Vycl9taW51dGUgPSBteWRhdGUuZ2V0TWludXRlcygpOwogICAgICAgIHZhciBjdXJyX3NlY29uZHMgPSBteWRhdGUuZ2V0U2Vjb25kcygpOwogICAgICAgIHZhciBmaWxlTmFtZSA9ICIiLmNvbmNhdChjdXJyX3llYXIpLmNvbmNhdChjdXJyX21vbnRoKS5jb25jYXQoY3Vycl9kYXRlLCAiXyIpLmNvbmNhdChjdXJyX2hvdXIpLmNvbmNhdChjdXJyX21pbnV0ZSkuY29uY2F0KGN1cnJfc2Vjb25kcywgIl9yZWNvcmQud2F2Iik7CiAgICAgICAgZmlsZUxpbmsuc2V0QXR0cmlidXRlKCJkb3dubG9hZCIsIGZpbGVOYW1lKTsKICAgICAgICBkb2N1bWVudC5ib2R5LmFwcGVuZENoaWxkKGZpbGVMaW5rKTsKICAgICAgICBmaWxlTGluay5jbGljaygpOwogICAgICAgIHRoaXMucmVjb3JkZXIuc3RvcCgpOwogICAgICAgIHRoaXMucmVjb3JkZXIucmVtb3ZlRXZlbnRMaXN0ZW5lcigiZGF0YWF2YWlsYWJsZSIsIGZ1bmN0aW9uICgpIHsKICAgICAgICAgIF90aGlzLnJlY29yZEZpbGUgPSBudWxsOwogICAgICAgIH0pOwogICAgICB9CiAgICB9CiAgfQp9Ow=="},{"version":3,"sources":["Question.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA,OAAA,QAAA,IACA,aADA,EAEA,YAFA,EAGA,YAHA,EAIA,aAJA,QAKA,2BALA;AAMA,SAAA,cAAA,QAAA,8BAAA;AACA,OAAA,iBAAA,MAAA,qBAAA,C,CACA;;AACA,OAAA,aAAA,MAAA,oDAAA;AAEA,eAAA;AACA,EAAA,UAAA,EAAA;AACA,IAAA,QAAA,EAAA,QADA;AAEA,IAAA,cAAA,EAAA;AAFA,GADA;AAKA,EAAA,IALA,kBAKA;AACA,WAAA;AACA,MAAA,SAAA,EAAA,KADA;AAEA,MAAA,SAAA,EAAA,KAFA;AAGA,MAAA,UAAA,EAAA,IAHA;AAIA,MAAA,SAAA,EAAA,KAJA;AAKA,MAAA,QAAA,EAAA,IALA;AAMA,MAAA,UAAA,EAAA,IANA;AAOA,MAAA,QAAA,EAAA,IAAA,aAAA,CAAA;AACA,QAAA,QAAA,EAAA,KAAA,EAAA,CAAA,UAAA,CADA;AAEA,QAAA,QAAA,EAAA,KAAA,EAAA,CAAA,UAAA,CAFA;AAGA,QAAA,EAAA,EAAA,KAAA,EAAA,CAAA,IAAA,CAHA;AAIA,QAAA,QAAA,EAAA,KAAA,EAAA,CAAA,UAAA,CAJA;AAKA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,MAAA,CALA;AAMA,QAAA,UAAA,EAAA,KAAA,EAAA,CAAA,YAAA,CANA;AAOA,QAAA,sBAAA,EAAA,KAAA,EAAA,CAAA,wBAAA,CAPA;AAQA,QAAA,4BAAA,EAAA,KAAA,EAAA,CAAA,8BAAA,CARA;AASA,QAAA,WAAA,EAAA,KAAA,EAAA,CAAA,aAAA,CATA;AAUA,QAAA,WAAA,EAAA,KAAA,EAAA,CAAA,aAAA,CAVA;AAWA,QAAA,UAAA,EAAA,KAAA,EAAA,CAAA,YAAA,CAXA;AAYA,QAAA,gBAAA,EAAA,KAAA,EAAA,CAAA,kBAAA,CAZA;AAaA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,MAAA,CAbA;AAcA,QAAA,IAAA,EAAA,KAAA,EAAA,CAAA,MAAA,CAdA;AAeA,QAAA,gBAAA,EAAA,KAAA,EAAA,CAAA,kBAAA,CAfA;AAgBA,QAAA,aAAA,EAAA,KAAA,EAAA,CAAA,eAAA,CAhBA;AAiBA,QAAA,YAAA,EAAA,KAAA,EAAA,CAAA,cAAA,CAjBA;AAkBA,QAAA,WAAA,EAAA,KAAA,EAAA,CAAA,aAAA,CAlBA;AAmBA,QAAA,MAAA,EAAA,KAAA,EAAA,CAAA,QAAA,CAnBA;AAoBA,QAAA,YAAA,EAAA,KAAA,EAAA,CAAA,cAAA,CApBA;AAqBA,QAAA,QAAA,EAAA,KAAA,EAAA,CAAA,UAAA,CArBA;AAsBA,QAAA,QAAA,EAAA,KAAA,EAAA,CAAA,UAAA,CAtBA;AAuBA,QAAA,cAAA,EAAA,KAAA,EAAA,CAAA,gBAAA,CAvBA;AAwBA,QAAA,kBAAA,EAAA,KAAA,EAAA,CAAA,oBAAA,CAxBA;AAyBA,QAAA,cAAA,EAAA,KAAA,EAAA,CAAA,gBAAA;AAzBA,OAAA,CAPA;AAkCA,MAAA,SAAA,EAAA,CACA,IAAA,aAAA,CAAA;AACA,QAAA,EAAA,EAAA,YADA;AAEA,QAAA,OAAA,EAAA,mCAFA;AAGA,QAAA,KAAA,EAAA,0BAHA;AAIA,QAAA,IAAA,EAAA,YAAA,CAAA,IAJA;AAKA,QAAA,WAAA,EAAA;AALA,OAAA,CADA,EAQA,IAAA,aAAA,CAAA;AACA,QAAA,EAAA,EAAA,OADA;AAEA,QAAA,OAAA,EAAA,qCAFA;AAGA,QAAA,KAAA,EAAA,2BAHA;AAIA,QAAA,IAAA,EAAA,YAAA,CAAA,KAJA;AAKA,QAAA,WAAA,EAAA;AALA,OAAA,CARA,EAeA,IAAA,aAAA,CAAA;AACA,QAAA,EAAA,EAAA,OADA;AAEA,QAAA,KAAA,EAAA,uDAFA;AAGA,QAAA,IAAA,EAAA,YAAA,CAAA,KAHA;AAIA,QAAA,IAAA,EAAA;AAJA,OAAA,CAfA,EAqBA,IAAA,aAAA,CAAA;AACA,QAAA,EAAA,EAAA,eADA;AAEA,QAAA,KAAA,EAAA,qBAFA;AAGA,QAAA,IAAA,EAAA,YAAA,CAAA,cAHA;AAIA,QAAA,QAAA,EAAA,KAJA;AAKA,QAAA,QAAA,EAAA,uBALA;AAMA,QAAA,OAAA,EAAA,CACA,IAAA,YAAA,CAAA;AACA,UAAA,KAAA,EAAA;AADA,SAAA,CADA,EAIA,IAAA,YAAA,CAAA;AACA,UAAA,KAAA,EAAA;AADA,SAAA,CAJA,EAOA,IAAA,YAAA,CAAA;AACA,UAAA,KAAA,EAAA;AADA,SAAA,CAPA,EAUA,IAAA,YAAA,CAAA;AACA,UAAA,KAAA,EAAA;AADA,SAAA,CAVA;AANA,OAAA,CArBA;AAlCA,KAAA;AA8EA,GApFA;AAsFA,EAAA,YAtFA,0BAsFA;AACA;AACA,QAAA,CAAA,MAAA,CAAA,aAAA,EAAA;AACA,MAAA,MAAA,CAAA,aAAA,GAAA,iBAAA;AACA;AACA,GA3FA;AA6FA,EAAA,OAAA,EAAA;AACA;AACA,IAAA,UAFA,sBAEA,SAFA,EAEA,YAFA,EAEA;AACA;AACA,WAAA,SAAA,GAAA,SAAA;AACA,KALA;;AAOA;AACA,IAAA,QARA,oBAQA,YARA,EAQA;AACA;AACA;AACA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,UAAA;AACA,WAAA,SAAA,GAAA,IAAA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,YAAA;AACA,KAfA;AAiBA,IAAA,UAjBA,wBAiBA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,kBAAA,EADA,CAEA;AACA;AACA;;AACA,WAAA,KAAA,CAAA,QAAA,CAAA,SAAA,GAAA,IAAA;AAEA,WAAA,SAAA,GAAA,IAAA;AAEA;;AACA,UAAA,IAAA,GAAA,KAAA,OAAA,EAAA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA,KAvCA;AAyCA,IAAA,OAzCA,qBAyCA;AACA,UAAA,IAAA,GAAA;AACA,QAAA,SAAA,EAAA,EADA;AAEA,QAAA,OAAA,EAAA;AAFA,OAAA;AAKA,WAAA,SAAA,CAAA,OAAA,CAAA,UAAA,QAAA,EAAA;AACA,YAAA,QAAA,CAAA,KAAA,EAAA;AACA,cAAA,MAAA,GAAA,QAAA,CAAA,MAAA;;AACA,cAAA,KAAA,CAAA,OAAA,CAAA,MAAA,CAAA,EAAA;AACA,YAAA,MAAA,GAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA;AACA;;AAEA,UAAA,IAAA,CAAA,SAAA,CAAA,IAAA,CAAA,QAAA,CAAA,KAAA;AACA,UAAA,IAAA,CAAA,OAAA,CAAA,IAAA,CAAA,MAAA;AACA;AACA,OAVA;AAYA,aAAA,IAAA;AACA,KA5DA;AA8DA,IAAA,QA9DA,oBA8DA,MA9DA,EA8DA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,sBAAA,EAAA,MAAA;AACA,KAhEA;AAkEA,IAAA,QAlEA,oBAkEA,IAlEA,EAkEA;AACA,MAAA,OAAA,CAAA,GAAA,CAAA,UAAA;AACA,UAAA,OAAA,GAAA,MAAA,CAAA,GAAA,CAAA,eAAA,CAAA,IAAA,IAAA,CAAA,CAAA,IAAA,CAAA,CAAA,CAAA;AACA,UAAA,QAAA,GAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA;AACA,MAAA,QAAA,CAAA,IAAA,GAAA,OAAA;AACA,UAAA,MAAA,GAAA,IAAA,IAAA,EAAA;AACA,UAAA,SAAA,GAAA,CAAA,MAAA,MAAA,CAAA,OAAA,EAAA,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,UAAA,GAAA,CAAA,OAAA,MAAA,CAAA,QAAA,KAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,UAAA,SAAA,GAAA,MAAA,CAAA,WAAA,EAAA;AACA,UAAA,SAAA,GAAA,MAAA,CAAA,QAAA,EAAA;AACA,UAAA,WAAA,GAAA,MAAA,CAAA,UAAA,EAAA;AACA,UAAA,YAAA,GAAA,MAAA,CAAA,UAAA,EAAA;AACA,UAAA,QAAA,aAAA,SAAA,SAAA,UAAA,SAAA,SAAA,cAAA,SAAA,SAAA,WAAA,SAAA,YAAA,gBAAA;AACA,MAAA,QAAA,CAAA,YAAA,CAAA,UAAA,EAAA,QAAA;AACA,MAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,QAAA;AAEA,MAAA,QAAA,CAAA,KAAA;AACA,KAnFA;AAqFA,IAAA,kBArFA,gCAqFA;AAAA;;AACA,WAAA,SAAA,GAAA,CAAA,KAAA,SAAA;;AACA,UAAA,KAAA,SAAA,EAAA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,WAAA,EADA,CAEA;;AACA,YAAA,aAAA,GAAA;AACA,UAAA,oBAAA,EAAA;AAAA,mBAAA,IAAA,aAAA,EAAA;AAAA,WADA;AAEA,UAAA,sBAAA,EACA,6EAHA;AAIA,UAAA,uBAAA,EACA;AALA,SAAA;AAQA,QAAA,SAAA,CAAA,YAAA,CAAA,YAAA,CAAA;AAAA,UAAA,KAAA,EAAA;AAAA,SAAA,EAAA,IAAA,CAAA,UAAA,MAAA,EAAA;AACA;AACA,UAAA,KAAA,CAAA,QAAA,GAAA,IAAA,aAAA,CAAA,MAAA,EAAA,EAAA,EAAA,aAAA,CAAA,CAFA,CAGA;;AACA,UAAA,KAAA,CAAA,QAAA,CAAA,KAAA;;AACA,UAAA,KAAA,CAAA,QAAA,CAAA,gBAAA,CAAA,eAAA,EAAA,UAAA,CAAA,EAAA;AACA,YAAA,KAAA,CAAA,UAAA,GAAA,CAAA,CAAA,IAAA;AACA,WAFA;AAGA,SARA;AASA,OApBA,MAoBA;AACA,QAAA,OAAA,CAAA,GAAA,CAAA,eAAA;AACA,YAAA,OAAA,GAAA,MAAA,CAAA,GAAA,CAAA,eAAA,CAAA,IAAA,IAAA,CAAA,CAAA,KAAA,UAAA,CAAA,CAAA,CAAA;AACA,YAAA,QAAA,GAAA,QAAA,CAAA,aAAA,CAAA,GAAA,CAAA;AACA,QAAA,QAAA,CAAA,IAAA,GAAA,OAAA;AACA,YAAA,MAAA,GAAA,IAAA,IAAA,EAAA;AACA,YAAA,SAAA,GAAA,CAAA,MAAA,MAAA,CAAA,OAAA,EAAA,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,UAAA,GAAA,CAAA,OAAA,MAAA,CAAA,QAAA,KAAA,CAAA,CAAA,EAAA,KAAA,CAAA,CAAA,CAAA,CAAA;AACA,YAAA,SAAA,GAAA,MAAA,CAAA,WAAA,EAAA;AACA,YAAA,SAAA,GAAA,MAAA,CAAA,QAAA,EAAA;AACA,YAAA,WAAA,GAAA,MAAA,CAAA,UAAA,EAAA;AACA,YAAA,YAAA,GAAA,MAAA,CAAA,UAAA,EAAA;AACA,YAAA,QAAA,aAAA,SAAA,SAAA,UAAA,SAAA,SAAA,cAAA,SAAA,SAAA,WAAA,SAAA,YAAA,gBAAA;AACA,QAAA,QAAA,CAAA,YAAA,CAAA,UAAA,EAAA,QAAA;AACA,QAAA,QAAA,CAAA,IAAA,CAAA,WAAA,CAAA,QAAA;AAEA,QAAA,QAAA,CAAA,KAAA;AACA,aAAA,QAAA,CAAA,IAAA;AACA,aAAA,QAAA,CAAA,mBAAA,CAAA,eAAA,EAAA,YAAA;AACA,UAAA,KAAA,CAAA,UAAA,GAAA,IAAA;AACA,SAFA;AAGA;AACA;AAjIA;AA7FA,CAAA","sourcesContent":["<template>\n  <div>\n    <flow-form\n      ref=\"flowform\"\n      @complete=\"onComplete\"\n      @submit=\"onSubmit\"\n      :questions=\"questions\"\n      :language=\"language\"\n      :standalone=\"true\"\n    >\n      <!-- Custom content for the Complete/Submit screen slots in the FlowForm component -->\n      <!-- We've overriden the default \"complete\" slot content -->\n      <template v-slot:complete>\n        <div class=\"f-section-wrap\">\n          <p>\n            <span class=\"fh2\">Finally.</span>\n            <span class=\"f-section-text\">\n              To complete, please tell us a bit about your self\n            </span>\n          </p>\n          <p class=\"f-description\">\n            Note: By submitting it, you authorized us to keep the record/video of your\n          </p>\n          <div class=\"f-answer\">\n            <div\n              v-if=\"$browserDetect.meta.name === 'Safari'\"\n              class=\"vue-audio-recorder\"\n              :class=\"{ active: recording }\"\n              @click=\"handleRecordSafari\"\n            >\n              <span></span>\n            </div>\n            <vue-record-audio\n              v-else\n              mode=\"press\"\n              @stream=\"onStream\"\n              @result=\"onResult\"\n            />\n          </div>\n        </div>\n      </template>\n\n      <!-- We've overriden the default \"completeButton\" slot content -->\n      <template v-slot:completeButton>\n        <div class=\"f-submit\" v-if=\"!submitted && attachFile\">\n          <button\n            class=\"o-btn-action\"\n            ref=\"button\"\n            type=\"submit\"\n            @click.prevent=\"$refs.flowform.submit()\"\n            aria-label=\"Press to submit\"\n          >\n            <span>{{ language.submitText }}</span>\n          </button>\n        </div>\n\n        <p class=\"text-success\" v-if=\"submitted\">Submitted succesfully.</p>\n      </template>\n    </flow-form>\n  </div>\n</template>\n\n<script>\n// If using the npm package, use the following line instead of the ones above.\nimport FlowForm, {\n  QuestionModel,\n  QuestionType,\n  ChoiceOption,\n  LanguageModel,\n} from \"@ditdot-dev/vue-flow-form\";\nimport { VueRecordAudio } from \"@codekraft-studio/vue-record\";\nimport OpusMediaRecorder from \"opus-media-recorder\";\n// Use worker-loader\nimport EncoderWorker from \"worker-loader!opus-media-recorder/encoderWorker.js\";\n\nexport default {\n  components: {\n    FlowForm,\n    VueRecordAudio,\n  },\n  data() {\n    return {\n      submitted: false,\n      completed: false,\n      attachFile: null,\n      recording: false,\n      recorder: null,\n      recordFile: null,\n      language: new LanguageModel({\n        enterKey: this.$t(\"enterKey\"),\n        shiftKey: this.$t(\"shiftKey\"),\n        ok: this.$t(\"ok\"),\n        continue: this.$t(\"continue\"),\n        skip: this.$t(\"skip\"),\n        pressEnter: this.$t(\"pressEnter\"),\n        multipleChoiceHelpText: this.$t(\"multipleChoiceHelpText\"),\n        multipleChoiceHelpTextSingle: this.$t(\"multipleChoiceHelpTextSingle\"),\n        otherPrompt: this.$t(\"otherPrompt\"),\n        placeholder: this.$t(\"placeholder\"),\n        submitText: this.$t(\"submitText\"),\n        longTextHelpText: this.$t(\"longTextHelpText\"),\n        prev: this.$t(\"prev\"),\n        next: this.$t(\"next\"),\n        percentCompleted: this.$t(\"percentCompleted\"),\n        invalidPrompt: this.$t(\"invalidPrompt\"),\n        thankYouText: this.$t(\"thankYouText\"),\n        successText: this.$t(\"successText\"),\n        ariaOk: this.$t(\"ariaOk\"),\n        ariaRequired: this.$t(\"ariaRequired\"),\n        ariaPrev: this.$t(\"ariaPrev\"),\n        ariaNext: this.$t(\"ariaNext\"),\n        ariaSubmitText: this.$t(\"ariaSubmitText\"),\n        ariaMultipleChoice: this.$t(\"ariaMultipleChoice\"),\n        ariaTypeAnswer: this.$t(\"ariaTypeAnswer\"),\n      }),\n      questions: [\n        new QuestionModel({\n          id: \"first_name\",\n          tagline: \"Hi! Welcome to our demo survey 😊\",\n          title: \"What is your first name?\",\n          type: QuestionType.Text,\n          placeholder: \"Start typing here...\",\n        }),\n        new QuestionModel({\n          id: \"email\",\n          tagline: \"Nice to meet you 👀, let's continue\",\n          title: \"Provide an example email.\",\n          type: QuestionType.Email,\n          placeholder: \"Start typing here...\",\n        }),\n        new QuestionModel({\n          id: \"phone\",\n          title: \"Doing great! 👍 Go ahead and try with a phone number.\",\n          type: QuestionType.Phone,\n          mask: \"####-###-###\",\n        }),\n        new QuestionModel({\n          id: \"place_choices\",\n          title: \"Where are you from?\",\n          type: QuestionType.MultipleChoice,\n          multiple: false,\n          helpText: \"Select your place. 👇\",\n          options: [\n            new ChoiceOption({\n              label: \"Paris\",\n            }),\n            new ChoiceOption({\n              label: \"Lodon\",\n            }),\n            new ChoiceOption({\n              label: \"Helsinki\",\n            }),\n            new ChoiceOption({\n              label: \"Berlin\",\n            }),\n          ],\n        }),\n      ],\n    };\n  },\n\n  beforeCreate() {\n    // Check if MediaRecorder available.\n    if (!window.MediaRecorder) {\n      window.MediaRecorder = OpusMediaRecorder;\n    }\n  },\n\n  methods: {\n    /* eslint-disable-next-line no-unused-vars */\n    onComplete(completed, questionList) {\n      // This method is called whenever the \"completed\" status is changed.\n      this.completed = completed;\n    },\n\n    /* eslint-disable-next-line no-unused-vars */\n    onSubmit(questionList) {\n      // This method will only be called if you don't override the\n      // completeButton slot.\n      // this.onSendData()\n      console.log(\"onSubmit\");\n      this.submitted = true;\n      console.log(questionList);\n    },\n\n    onSendData() {\n      console.log(\"okeke onSendData\");\n      // Set `submitted` to true so the form knows not to allow back/forward\n      // navigation anymore.\n      // this.$refs.flowform.submit();\n      this.$refs.flowform.submitted = true;\n\n      this.submitted = true;\n\n      /* eslint-disable-next-line no-unused-vars */\n      const data = this.getData();\n      /*\n          You can use Fetch API to send the data to your server, eg.:\n\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n          })\n        */\n    },\n\n    getData() {\n      const data = {\n        questions: [],\n        answers: [],\n      };\n\n      this.questions.forEach((question) => {\n        if (question.title) {\n          let answer = question.answer;\n          if (Array.isArray(answer)) {\n            answer = answer.join(\", \");\n          }\n\n          data.questions.push(question.title);\n          data.answers.push(answer);\n        }\n      });\n\n      return data;\n    },\n\n    onStream(stream) {\n      console.log(\"Got a stream object:\", stream);\n    },\n\n    onResult(data) {\n      console.log(\"onResult\");\n      const fileURL = window.URL.createObjectURL(new Blob([data]));\n      const fileLink = document.createElement(\"a\");\n      fileLink.href = fileURL;\n      const mydate = new Date();\n      const curr_date = (\"0\" + mydate.getDate()).slice(-2);\n      const curr_month = (\"0\" + (mydate.getMonth() + 1)).slice(-2);\n      const curr_year = mydate.getFullYear();\n      const curr_hour = mydate.getHours();\n      const curr_minute = mydate.getMinutes();\n      const curr_seconds = mydate.getSeconds();\n      const fileName = `${curr_year}${curr_month}${curr_date}_${curr_hour}${curr_minute}${curr_seconds}_record.wav`;\n      fileLink.setAttribute(\"download\", fileName);\n      document.body.appendChild(fileLink);\n\n      fileLink.click();\n    },\n\n    handleRecordSafari() {\n      this.recording = !this.recording;\n      if (this.recording) {\n        console.log(\"Recording\");\n        // Non-standard options\n        const workerOptions = {\n          encoderWorkerFactory: () => new EncoderWorker(),\n          OggOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/OggOpusEncoder.wasm\",\n          WebMOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/WebMOpusEncoder.wasm\",\n        };\n\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n          // Start recording\n          this.recorder = new MediaRecorder(stream, {}, workerOptions);\n          // Set record to <audio> when recording will be finished\n          this.recorder.start();\n          this.recorder.addEventListener(\"dataavailable\", (e) => {\n            this.recordFile = e.data;\n          });\n        });\n      } else {\n        console.log(\"End recording\");\n        const fileURL = window.URL.createObjectURL(new Blob([this.recordFile]));\n        const fileLink = document.createElement(\"a\");\n        fileLink.href = fileURL;\n        const mydate = new Date();\n        const curr_date = (\"0\" + mydate.getDate()).slice(-2);\n        const curr_month = (\"0\" + (mydate.getMonth() + 1)).slice(-2);\n        const curr_year = mydate.getFullYear();\n        const curr_hour = mydate.getHours();\n        const curr_minute = mydate.getMinutes();\n        const curr_seconds = mydate.getSeconds();\n        const fileName = `${curr_year}${curr_month}${curr_date}_${curr_hour}${curr_minute}${curr_seconds}_record.wav`;\n        fileLink.setAttribute(\"download\", fileName);\n        document.body.appendChild(fileLink);\n\n        fileLink.click();\n        this.recorder.stop();\n        this.recorder.removeEventListener(\"dataavailable\", () => {\n          this.recordFile = null;\n        });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import \"~@ditdot-dev/vue-flow-form/dist/vue-flow-form.css\";\n@import \"~@ditdot-dev/vue-flow-form/dist/vue-flow-form.theme-green.css\";\n</style>"],"sourceRoot":"src/components"}]}