{"remainingRequest":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/QuestionTypes/BaseType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/QuestionTypes/BaseType.vue","mtime":1635747848180},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/babel-loader/lib/index.js","mtime":1627740747092},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KCi8qCiAgQ29weXJpZ2h0IChjKSAyMDIwIC0gcHJlc2VudCwgRElURE9UIEx0ZC4gLSBNSVQgTGljZW5jZQogIGh0dHBzOi8vZ2l0aHViLmNvbS9kaXRkb3QtZGV2L3Z1ZS1mbG93LWZvcm0KICBodHRwczovL3d3dy5kaXRkb3QuaHIvZW4KKi8KCmltcG9ydCBRdWVzdGlvbk1vZGVsIGZyb20gJy4uLy4uL21vZGVscy9RdWVzdGlvbk1vZGVsJwppbXBvcnQgTGFuZ3VhZ2VNb2RlbCBmcm9tICcuLi8uLi9tb2RlbHMvTGFuZ3VhZ2VNb2RlbCcKaW1wb3J0IHsgSXNNb2JpbGUgfSBmcm9tICcuLi8uLi9taXhpbnMvSXNNb2JpbGUnCgpleHBvcnQgZGVmYXVsdCB7CiAgbmFtZTogJ0Zsb3dGb3JtQmFzZVR5cGUnLAogIHByb3BzOiB7CiAgICBsYW5ndWFnZTogTGFuZ3VhZ2VNb2RlbCwKICAgIHF1ZXN0aW9uOiBRdWVzdGlvbk1vZGVsLAogICAgYWN0aXZlOiBCb29sZWFuLAogICAgdmFsdWU6IFtTdHJpbmcsIEFycmF5LCBCb29sZWFuLCBOdW1iZXIsIE9iamVjdCwgRmlsZUxpc3RdCiAgfSwKICBtaXhpbnM6IFsKICAgIElzTW9iaWxlLAogIF0sCiAgZGF0YSgpIHsKICAgIHJldHVybiB7CiAgICAgIGRpcnR5OiBmYWxzZSwKICAgICAgZGF0YVZhbHVlOiBudWxsLAogICAgICBhbnN3ZXI6IG51bGwsCiAgICAgIGVudGVyUHJlc3NlZDogZmFsc2UsCiAgICAgIGFsbG93ZWRDaGFyczogbnVsbCwKICAgICAgYWx3YXlzQWxsb3dlZEtleXM6IFsnQXJyb3dMZWZ0JywgJ0Fycm93UmlnaHQnLCAnRGVsZXRlJywgJ0JhY2tzcGFjZSddLAogICAgICBmb2N1c2VkOiBmYWxzZSwKICAgICAgY2FuUmVjZWl2ZUZvY3VzOiBmYWxzZQogICAgfQogIH0sCiAgbW91bnRlZCgpIHsKICAgIGlmICh0aGlzLnF1ZXN0aW9uLmFuc3dlcikgewogICAgICB0aGlzLmRhdGFWYWx1ZSA9IHRoaXMuYW5zd2VyID0gdGhpcy5xdWVzdGlvbi5hbnN3ZXIKICAgIH0gZWxzZSBpZiAodGhpcy5xdWVzdGlvbi5tdWx0aXBsZSkgewogICAgICB0aGlzLmRhdGFWYWx1ZSA9IFtdCiAgICB9CiAgfSwKICBtZXRob2RzOiB7CiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIGNhbiBiZSBvdmVycmlkZW4gaW4gY3VzdG9tIGNvbXBvbmVudHMgdG8gCiAgICAgKiBjaGFuZ2UgdGhlIGFuc3dlciBiZWZvcmUgZ29pbmcgdGhyb3VnaCB2YWxpZGF0aW9uLgogICAgICovCiAgICBmaXhBbnN3ZXIoYW5zd2VyKSB7CiAgICAgIHJldHVybiBhbnN3ZXIKICAgIH0sCgogICAgZ2V0RWxlbWVudCgpIHsKICAgICAgbGV0IGVsID0gdGhpcy4kcmVmcy5pbnB1dAoKICAgICAgLy8gU29tZXRpbWVzIHRoZSBpbnB1dCBpcyBuZXN0ZWQgc28gd2UgbmVlZCB0byBmaW5kIGl0CiAgICAgIHdoaWxlIChlbCAmJiBlbC4kZWwpIHsKICAgICAgICBlbCA9IGVsLiRlbAogICAgICB9CgogICAgICByZXR1cm4gZWwKICAgIH0sCgogICAgc2V0Rm9jdXMoKSB7CiAgICAgIHRoaXMuZm9jdXNlZCA9IHRydWUKICAgIH0sCgogICAgLy8gZXNsaW50LWRpc2FibGUtbmV4dC1saW5lIG5vLXVudXNlZC12YXJzCiAgICB1bnNldEZvY3VzKCRldmVudCkgewogICAgICB0aGlzLmZvY3VzZWQgPSBmYWxzZQogICAgfSwKCiAgICBmb2N1cygpIHsKICAgICAgaWYgKCF0aGlzLmZvY3VzZWQpIHsKICAgICAgICBjb25zdCBlbCA9IHRoaXMuZ2V0RWxlbWVudCgpCgogICAgICAgIGVsICYmIGVsLmZvY3VzKCkKICAgICAgfQogICAgfSwKCiAgICBibHVyKCkgewogICAgICBjb25zdCBlbCA9IHRoaXMuZ2V0RWxlbWVudCgpCgogICAgICBlbCAmJiBlbC5ibHVyKCkKICAgIH0sCgogICAgb25LZXlEb3duKCRldmVudCkgewogICAgICB0aGlzLmVudGVyUHJlc3NlZCA9IGZhbHNlCiAgICAgIGNsZWFyVGltZW91dCh0aGlzLnRpbWVvdXRJZCkKCiAgICAgIGlmICgkZXZlbnQpIHsKICAgICAgICBpZiAoJGV2ZW50LmtleSA9PT0gJ0VudGVyJyAmJiAhJGV2ZW50LnNoaWZ0S2V5KSB7CiAgICAgICAgICB0aGlzLnVuc2V0Rm9jdXMoKQogICAgICAgIH0KCiAgICAgICAgaWYgKHRoaXMuYWxsb3dlZENoYXJzICE9PSBudWxsKSB7CiAgICAgICAgICAvLyBDaGVjayBpZiB0aGUgZW50ZXJlZCBjaGFyYWN0ZXIgaXMgYWxsb3dlZC4KICAgICAgICAgIC8vIFdlIGFsd2F5cyBhbGxvdyBrZXlzIGZyb20gdGhlIGFsd2F5c0FsbG93ZWRLZXlzIGFycmF5LgogICAgICAgICAgaWYgKHRoaXMuYWx3YXlzQWxsb3dlZEtleXMuaW5kZXhPZigkZXZlbnQua2V5KSA9PT0gLTEgJiYgdGhpcy5hbGxvd2VkQ2hhcnMuaW5kZXhPZigkZXZlbnQua2V5KSA9PT0gLTEpIHsKICAgICAgICAgICAgJGV2ZW50LnByZXZlbnREZWZhdWx0KCkKICAgICAgICAgIH0KICAgICAgICB9CiAgICAgIH0KICAgIH0sCgogICAgb25DaGFuZ2UoJGV2ZW50KSB7CiAgICAgIHRoaXMuZGlydHkgPSB0cnVlCiAgICAgIHRoaXMuZGF0YVZhbHVlID0gJGV2ZW50LnRhcmdldC52YWx1ZQoKICAgICAgdGhpcy5vbktleURvd24oKQogICAgICB0aGlzLnNldEFuc3dlcih0aGlzLmRhdGFWYWx1ZSkKICAgIH0sCgogICAgb25FbnRlcigpIHsKICAgICAgdGhpcy5fb25FbnRlcigpCiAgICB9LAoKICAgIF9vbkVudGVyKCkgewogICAgICB0aGlzLmVudGVyUHJlc3NlZCA9IHRydWUKCiAgICAgIHRoaXMuZGF0YVZhbHVlID0gdGhpcy5maXhBbnN3ZXIodGhpcy5kYXRhVmFsdWUpCiAgICAgIHRoaXMuc2V0QW5zd2VyKHRoaXMuZGF0YVZhbHVlKQogICAgICB0aGlzLmlzVmFsaWQoKSA/IHRoaXMuYmx1cigpIDogdGhpcy5mb2N1cygpCiAgICB9LAoKICAgIHNldEFuc3dlcihhbnN3ZXIpIHsKICAgICAgdGhpcy5xdWVzdGlvbi5zZXRBbnN3ZXIoYW5zd2VyKQoKICAgICAgdGhpcy5hbnN3ZXIgPSB0aGlzLnF1ZXN0aW9uLmFuc3dlcgogICAgICB0aGlzLnF1ZXN0aW9uLmFuc3dlcmVkID0gdGhpcy5pc1ZhbGlkKCkKCiAgICAgIHRoaXMuJGVtaXQoJ2lucHV0JywgdGhpcy5hbnN3ZXIpCiAgICB9LAoKICAgIHNob3dJbnZhbGlkKCkgewogICAgICByZXR1cm4gdGhpcy5kaXJ0eSAmJiB0aGlzLmVudGVyUHJlc3NlZCAmJiAhdGhpcy5pc1ZhbGlkKCkKICAgIH0sCgogICAgaXNWYWxpZCgpIHsKICAgICAgaWYgKCF0aGlzLnF1ZXN0aW9uLnJlcXVpcmVkICYmICF0aGlzLmhhc1ZhbHVlICYmIHRoaXMuZGlydHkpIHsKICAgICAgICByZXR1cm4gdHJ1ZQogICAgICB9CgogICAgICBpZiAodGhpcy52YWxpZGF0ZSgpKSB7CiAgICAgICAgcmV0dXJuIHRydWUKICAgICAgfQoKICAgICAgcmV0dXJuIGZhbHNlCiAgICB9LAogICAgCiAgICAvKioKICAgICAqIFRoaXMgbWV0aG9kIHZhbGlkYXRlcyB0aGUgaW5wdXQgYW5kIGlzIG1lYW50IHRvIGJlIG92ZXJyaWRlbgogICAgICogaW4gY3VzdG9tIHF1ZXN0aW9uIHR5cGVzLgogICAgICovCiAgICB2YWxpZGF0ZSgpIHsKICAgICAgcmV0dXJuICF0aGlzLnF1ZXN0aW9uLnJlcXVpcmVkIHx8IHRoaXMuaGFzVmFsdWUKICAgIH0KICB9LAogIAogIGNvbXB1dGVkOiB7CiAgICBwbGFjZWhvbGRlcigpIHsKICAgICAgcmV0dXJuIHRoaXMucXVlc3Rpb24ucGxhY2Vob2xkZXIgfHwgdGhpcy5sYW5ndWFnZS5wbGFjZWhvbGRlcgogICAgfSwKCiAgICBoYXNWYWx1ZSgpIHsKICAgICAgaWYgKHRoaXMuZGF0YVZhbHVlICE9PSBudWxsKSB7CiAgICAgICAgbGV0IHYgPSB0aGlzLmRhdGFWYWx1ZQoKICAgICAgICBpZiAodi50cmltKSB7CiAgICAgICAgICAvLyBEb24ndCBhbGxvdyBlbXB0eSBzdHJpbmdzCiAgICAgICAgICByZXR1cm4gdi50cmltKCkubGVuZ3RoID4gMAogICAgICAgIH0KCiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkodikpIHsKICAgICAgICAgIC8vIERvbid0IGFsbG93IGVtcHR5IGFycmF5cwogICAgICAgICAgcmV0dXJuIHYubGVuZ3RoID4gMAogICAgICAgIH0KCiAgICAgICAgLy8gQWxsIG90aGVyIG5vbi1udWxsIHZhbHVlcyBhcmUgYWxsb3dlZCB0byBwYXNzIHRocm91Z2gKICAgICAgICByZXR1cm4gdHJ1ZQogICAgICB9CgogICAgICByZXR1cm4gZmFsc2UKICAgIH0KICB9Cn0K"},{"version":3,"sources":["BaseType.vue"],"names":[],"mappings":";;;AAGA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA","file":"BaseType.vue","sourceRoot":"src/components/QuestionTypes","sourcesContent":["// Used as the basis and extended by other Question Type components\n\n<script>\n  /*\n    Copyright (c) 2020 - present, DITDOT Ltd. - MIT Licence\n    https://github.com/ditdot-dev/vue-flow-form\n    https://www.ditdot.hr/en\n  */\n\n  import QuestionModel from '../../models/QuestionModel'\n  import LanguageModel from '../../models/LanguageModel'\n  import { IsMobile } from '../../mixins/IsMobile'\n\n  export default {\n    name: 'FlowFormBaseType',\n    props: {\n      language: LanguageModel,\n      question: QuestionModel,\n      active: Boolean,\n      value: [String, Array, Boolean, Number, Object, FileList]\n    },\n    mixins: [\n      IsMobile,\n    ],\n    data() {\n      return {\n        dirty: false,\n        dataValue: null,\n        answer: null,\n        enterPressed: false,\n        allowedChars: null,\n        alwaysAllowedKeys: ['ArrowLeft', 'ArrowRight', 'Delete', 'Backspace'],\n        focused: false,\n        canReceiveFocus: false\n      }\n    },\n    mounted() {\n      if (this.question.answer) {\n        this.dataValue = this.answer = this.question.answer\n      } else if (this.question.multiple) {\n        this.dataValue = []\n      }\n    },\n    methods: {\n      /**\n       * This method can be overriden in custom components to \n       * change the answer before going through validation.\n       */\n      fixAnswer(answer) {\n        return answer\n      },\n\n      getElement() {\n        let el = this.$refs.input\n\n        // Sometimes the input is nested so we need to find it\n        while (el && el.$el) {\n          el = el.$el\n        }\n\n        return el\n      },\n\n      setFocus() {\n        this.focused = true\n      },\n\n      // eslint-disable-next-line no-unused-vars\n      unsetFocus($event) {\n        this.focused = false\n      },\n\n      focus() {\n        if (!this.focused) {\n          const el = this.getElement()\n\n          el && el.focus()\n        }\n      },\n\n      blur() {\n        const el = this.getElement()\n\n        el && el.blur()\n      },\n\n      onKeyDown($event) {\n        this.enterPressed = false\n        clearTimeout(this.timeoutId)\n\n        if ($event) {\n          if ($event.key === 'Enter' && !$event.shiftKey) {\n            this.unsetFocus()\n          }\n\n          if (this.allowedChars !== null) {\n            // Check if the entered character is allowed.\n            // We always allow keys from the alwaysAllowedKeys array.\n            if (this.alwaysAllowedKeys.indexOf($event.key) === -1 && this.allowedChars.indexOf($event.key) === -1) {\n              $event.preventDefault()\n            }\n          }\n        }\n      },\n\n      onChange($event) {\n        this.dirty = true\n        this.dataValue = $event.target.value\n\n        this.onKeyDown()\n        this.setAnswer(this.dataValue)\n      },\n\n      onEnter() {\n        this._onEnter()\n      },\n\n      _onEnter() {\n        this.enterPressed = true\n\n        this.dataValue = this.fixAnswer(this.dataValue)\n        this.setAnswer(this.dataValue)\n        this.isValid() ? this.blur() : this.focus()\n      },\n\n      setAnswer(answer) {\n        this.question.setAnswer(answer)\n\n        this.answer = this.question.answer\n        this.question.answered = this.isValid()\n\n        this.$emit('input', this.answer)\n      },\n\n      showInvalid() {\n        return this.dirty && this.enterPressed && !this.isValid()\n      },\n\n      isValid() {\n        if (!this.question.required && !this.hasValue && this.dirty) {\n          return true\n        }\n\n        if (this.validate()) {\n          return true\n        }\n\n        return false\n      },\n      \n      /**\n       * This method validates the input and is meant to be overriden\n       * in custom question types.\n       */\n      validate() {\n        return !this.question.required || this.hasValue\n      }\n    },\n    \n    computed: {\n      placeholder() {\n        return this.question.placeholder || this.language.placeholder\n      },\n\n      hasValue() {\n        if (this.dataValue !== null) {\n          let v = this.dataValue\n\n          if (v.trim) {\n            // Don't allow empty strings\n            return v.trim().length > 0\n          }\n\n          if (Array.isArray(v)) {\n            // Don't allow empty arrays\n            return v.length > 0\n          }\n\n          // All other non-null values are allowed to pass through\n          return true\n        }\n\n        return false\n      }\n    }\n  }\n</script>\n\n<style></style>"]}]}