{"remainingRequest":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/QuestionList.vue?vue&type=style&index=0&id=815bc058&scoped=true&lang=css&","dependencies":[{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/QuestionList.vue","mtime":1635838773487},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/css-loader/dist/cjs.js","mtime":1627740750649},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1634035958257},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/postcss-loader/src/index.js","mtime":1627740750746},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCkBpbXBvcnQgIn5AZGl0ZG90LWRldi92dWUtZmxvdy1mb3JtL2Rpc3QvdnVlLWZsb3ctZm9ybS5jc3MiOwpAaW1wb3J0ICJ+QGRpdGRvdC1kZXYvdnVlLWZsb3ctZm9ybS9kaXN0L3Z1ZS1mbG93LWZvcm0udGhlbWUtZ3JlZW4uY3NzIjsK"},{"version":3,"sources":["QuestionList.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA6JA;AACA","file":"QuestionList.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <flow-form\n      ref=\"flowform\"\n      @submit=\"onSubmit\"\n      :questions=\"questions\"\n      :language=\"language\"\n      :standalone=\"true\"\n    >\n      <template v-if=\"!submitted\" v-slot:complete>\n        <ul style=\"margin-bottom: 3rem\">\n          <li v-for=\"question in questions\" :key=\"question.id\">\n            <p>{{ question.index + 1 }} . {{ question.title }}</p>\n            <audio v-if=\"question.type === 'FlowFormFileType'\" controls>\n              <source :src=\"question.answer\" />\n            </audio>\n            <p v-else style=\"color: black; font-style: italic\">\n              {{ question.answer || \"not answer\" }}\n            </p>\n            <hr />\n          </li>\n        </ul>\n      </template>\n    </flow-form>\n  </div>\n</template>\n\n<script>\nimport FlowForm from \"./FlowForm.vue\";\nimport LanguageModel from \"../models/LanguageModel\";\nimport QuestionModel, {\n  QuestionType,\n  ChoiceOption,\n} from \"../models/QuestionModel\";\n\nexport default {\n  components: {\n    FlowForm,\n  },\n  data() {\n    return {\n      submitted: false,\n      language: new LanguageModel({\n        enterKey: this.$t(\"enterKey\"),\n        shiftKey: this.$t(\"shiftKey\"),\n        ok: this.$t(\"ok\"),\n        continue: this.$t(\"continue\"),\n        skip: this.$t(\"skip\"),\n        pressEnter: this.$t(\"pressEnter\"),\n        multipleChoiceHelpText: this.$t(\"multipleChoiceHelpText\"),\n        multipleChoiceHelpTextSingle: this.$t(\"multipleChoiceHelpTextSingle\"),\n        otherPrompt: this.$t(\"otherPrompt\"),\n        placeholder: this.$t(\"placeholder\"),\n        submitText: this.$t(\"submitText\"),\n        longTextHelpText: this.$t(\"longTextHelpText\"),\n        prev: this.$t(\"prev\"),\n        next: this.$t(\"next\"),\n        percentCompleted: this.$t(\"percentCompleted\"),\n        invalidPrompt: this.$t(\"invalidPrompt\"),\n        thankYouText: this.$t(\"thankYouText\"),\n        successText: this.$t(\"successText\"),\n        ariaOk: this.$t(\"ariaOk\"),\n        ariaRequired: this.$t(\"ariaRequired\"),\n        ariaPrev: this.$t(\"ariaPrev\"),\n        ariaNext: this.$t(\"ariaNext\"),\n        ariaSubmitText: this.$t(\"ariaSubmitText\"),\n        ariaMultipleChoice: this.$t(\"ariaMultipleChoice\"),\n        ariaTypeAnswer: this.$t(\"ariaTypeAnswer\"),\n      }),\n      questions: [\n        new QuestionModel({\n          id: \"first_name\",\n          tagline: \"Hi! Welcome to our demo survey üòä\",\n          title: \"What is your first name?\",\n          type: QuestionType.Text,\n          placeholder: \"Start typing here...\",\n        }),\n        new QuestionModel({\n          id: \"email\",\n          tagline: \"Nice to meet you üëÄ, let's continue\",\n          title: \"Provide an example email.\",\n          type: QuestionType.Email,\n          placeholder: \"Start typing here...\",\n        }),\n        new QuestionModel({\n          id: \"phone\",\n          title: \"Doing great! üëç Go ahead and try with a phone number.\",\n          type: QuestionType.Phone,\n          mask: \"####-###-###\",\n        }),\n        // This is question for record\n        new QuestionModel({\n          id: \"file\",\n          title: \"Tell me about you.\",\n          type: QuestionType.File,\n          allowOther: true,\n          required: true,\n        }),\n\n        new QuestionModel({\n          id: \"place_choices\",\n          title: \"Where are you from?\",\n          type: QuestionType.MultipleChoice,\n          multiple: false,\n          helpText: \"Select your place. üëá\",\n          options: [\n            new ChoiceOption({\n              label: \"Paris\",\n            }),\n            new ChoiceOption({\n              label: \"Lodon\",\n            }),\n            new ChoiceOption({\n              label: \"Helsinki\",\n            }),\n            new ChoiceOption({\n              label: \"Berlin\",\n            }),\n          ],\n        }),\n      ],\n    };\n  },\n\n  methods: {\n    onSubmit() {\n      this.submitted = true;\n    },\n\n    onSendData() {\n      console.log(\"okeke onSendData\");\n      // Set `submitted` to true so the form knows not to allow back/forward\n      // navigation anymore.\n      // this.$refs.flowform.submit();\n      this.$refs.flowform.submitted = true;\n\n      this.submitted = true;\n\n      /* eslint-disable-next-line no-unused-vars */\n      const data = this.getData();\n      /*\n          You can use Fetch API to send the data to your server, eg.:\n\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n          })\n        */\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import \"~@ditdot-dev/vue-flow-form/dist/vue-flow-form.css\";\n@import \"~@ditdot-dev/vue-flow-form/dist/vue-flow-form.theme-green.css\";\n</style>"]}]}