{"remainingRequest":"/Users/sytruong/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/demo-questionaire/src/components/Question.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sytruong/demo-questionaire/src/components/Question.vue","mtime":1634624504807},{"path":"/Users/sytruong/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/demo-questionaire/node_modules/babel-loader/lib/index.js","mtime":1627740747092},{"path":"/Users/sytruong/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"},{"version":3,"sources":["Question.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+DA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Question.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <flow-form\n      ref=\"flowform\"\n      @complete=\"onComplete\"\n      @submit=\"onSubmit\"\n      :questions=\"questions\"\n      :language=\"language\"\n      :standalone=\"true\"\n    >\n      <!-- Custom content for the Complete/Submit screen slots in the FlowForm component -->\n      <!-- We've overriden the default \"complete\" slot content -->\n      <template v-slot:complete>\n        <div class=\"f-section-wrap\">\n          <p>\n            <span class=\"fh2\">Finally.</span>\n            <span class=\"f-section-text\">\n              To complete, please tell us a bit about your self\n            </span>\n          </p>\n          <p class=\"f-description\">\n            Note: By submitting it, you authorized us to keep the record/video of your\n          </p>\n          <div class=\"f-answer\">\n            <div\n              v-if=\"$browserDetect.meta.name === 'Safari'\"\n              class=\"vue-audio-recorder\"\n              :class=\"{ active: recording }\"\n              @click=\"handleRecordSafari\"\n            >\n              <span></span>\n            </div>\n            <vue-record-audio\n              v-else\n              mode=\"press\"\n              @stream=\"onStream\"\n              @result=\"onResult\"\n            />\n          </div>\n        </div>\n      </template>\n\n      <!-- We've overriden the default \"completeButton\" slot content -->\n      <template v-slot:completeButton>\n        <div class=\"f-submit\" v-if=\"!submitted && attachFile\">\n          <button\n            class=\"o-btn-action\"\n            ref=\"button\"\n            type=\"submit\"\n            @click.prevent=\"$refs.flowform.submit()\"\n            aria-label=\"Press to submit\"\n          >\n            <span>{{ language.submitText }}</span>\n          </button>\n        </div>\n\n        <p class=\"text-success\" v-if=\"submitted\">Submitted succesfully.</p>\n      </template>\n    </flow-form>\n  </div>\n</template>\n\n<script>\n// If using the npm package, use the following line instead of the ones above.\nimport FlowForm, {\n  QuestionModel,\n  QuestionType,\n  ChoiceOption,\n  LanguageModel,\n} from \"@ditdot-dev/vue-flow-form\";\nimport { VueRecordAudio } from \"@codekraft-studio/vue-record\";\nimport OpusMediaRecorder from \"opus-media-recorder\";\n// Use worker-loader\nimport EncoderWorker from \"worker-loader!opus-media-recorder/encoderWorker.js\";\n\nexport default {\n  components: {\n    FlowForm,\n    VueRecordAudio,\n  },\n  data() {\n    return {\n      submitted: false,\n      completed: false,\n      attachFile: null,\n      recording: false,\n      recorder: null,\n      recordFile: null,\n      language: new LanguageModel({\n        enterKey: this.$t(\"enterKey\"),\n        shiftKey: this.$t(\"shiftKey\"),\n        ok: this.$t(\"ok\"),\n        continue: this.$t(\"continue\"),\n        skip: this.$t(\"skip\"),\n        pressEnter: this.$t(\"pressEnter\"),\n        multipleChoiceHelpText: this.$t(\"multipleChoiceHelpText\"),\n        multipleChoiceHelpTextSingle: this.$t(\"multipleChoiceHelpTextSingle\"),\n        otherPrompt: this.$t(\"otherPrompt\"),\n        placeholder: this.$t(\"placeholder\"),\n        submitText: this.$t(\"submitText\"),\n        longTextHelpText: this.$t(\"longTextHelpText\"),\n        prev: this.$t(\"prev\"),\n        next: this.$t(\"next\"),\n        percentCompleted: this.$t(\"percentCompleted\"),\n        invalidPrompt: this.$t(\"invalidPrompt\"),\n        thankYouText: this.$t(\"thankYouText\"),\n        successText: this.$t(\"successText\"),\n        ariaOk: this.$t(\"ariaOk\"),\n        ariaRequired: this.$t(\"ariaRequired\"),\n        ariaPrev: this.$t(\"ariaPrev\"),\n        ariaNext: this.$t(\"ariaNext\"),\n        ariaSubmitText: this.$t(\"ariaSubmitText\"),\n        ariaMultipleChoice: this.$t(\"ariaMultipleChoice\"),\n        ariaTypeAnswer: this.$t(\"ariaTypeAnswer\"),\n      }),\n      questions: [\n        new QuestionModel({\n          id: \"first_name\",\n          tagline: \"Hi! Welcome to our demo survey 😊\",\n          title: \"What is your first name?\",\n          type: QuestionType.Text,\n          placeholder: \"Start typing here...\",\n        }),\n        new QuestionModel({\n          id: \"email\",\n          tagline: \"Nice to meet you 👀, let's continue\",\n          title: \"Provide an example email.\",\n          type: QuestionType.Email,\n          placeholder: \"Start typing here...\",\n        }),\n        new QuestionModel({\n          id: \"phone\",\n          title: \"Doing great! 👍 Go ahead and try with a phone number.\",\n          type: QuestionType.Phone,\n          mask: \"####-###-###\",\n        }),\n        new QuestionModel({\n          id: \"place_choices\",\n          title: \"Where are you from?\",\n          type: QuestionType.MultipleChoice,\n          multiple: false,\n          helpText: \"Select your place. 👇\",\n          options: [\n            new ChoiceOption({\n              label: \"Paris\",\n            }),\n            new ChoiceOption({\n              label: \"Lodon\",\n            }),\n            new ChoiceOption({\n              label: \"Helsinki\",\n            }),\n            new ChoiceOption({\n              label: \"Berlin\",\n            }),\n          ],\n        }),\n      ],\n    };\n  },\n\n  beforeCreate() {\n    // Check if MediaRecorder available.\n    if (!window.MediaRecorder) {\n      window.MediaRecorder = OpusMediaRecorder;\n    }\n  },\n\n  methods: {\n    /* eslint-disable-next-line no-unused-vars */\n    onComplete(completed, questionList) {\n      // This method is called whenever the \"completed\" status is changed.\n      this.completed = completed;\n    },\n\n    /* eslint-disable-next-line no-unused-vars */\n    onSubmit(questionList) {\n      // This method will only be called if you don't override the\n      // completeButton slot.\n      // this.onSendData()\n      console.log(\"onSubmit\");\n      this.submitted = true;\n      console.log(questionList);\n    },\n\n    onSendData() {\n      console.log(\"okeke onSendData\");\n      // Set `submitted` to true so the form knows not to allow back/forward\n      // navigation anymore.\n      // this.$refs.flowform.submit();\n      this.$refs.flowform.submitted = true;\n\n      this.submitted = true;\n\n      /* eslint-disable-next-line no-unused-vars */\n      const data = this.getData();\n      /*\n          You can use Fetch API to send the data to your server, eg.:\n\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n          })\n        */\n    },\n\n    getData() {\n      const data = {\n        questions: [],\n        answers: [],\n      };\n\n      this.questions.forEach((question) => {\n        if (question.title) {\n          let answer = question.answer;\n          if (Array.isArray(answer)) {\n            answer = answer.join(\", \");\n          }\n\n          data.questions.push(question.title);\n          data.answers.push(answer);\n        }\n      });\n\n      return data;\n    },\n\n    onStream(stream) {\n      console.log(\"Got a stream object:\", stream);\n    },\n\n    onResult(data) {\n      console.log(\"onResult\");\n      const fileURL = window.URL.createObjectURL(new Blob([data]));\n      const fileLink = document.createElement(\"a\");\n      fileLink.href = fileURL;\n      const mydate = new Date();\n      const curr_date = (\"0\" + mydate.getDate()).slice(-2);\n      const curr_month = (\"0\" + (mydate.getMonth() + 1)).slice(-2);\n      const curr_year = mydate.getFullYear();\n      const curr_hour = mydate.getHours();\n      const curr_minute = mydate.getMinutes();\n      const curr_seconds = mydate.getSeconds();\n      const fileName = `${curr_year}${curr_month}${curr_date}_${curr_hour}${curr_minute}${curr_seconds}_record.wav`;\n      fileLink.setAttribute(\"download\", fileName);\n      document.body.appendChild(fileLink);\n\n      fileLink.click();\n    },\n\n    handleRecordSafari() {\n      this.recording = !this.recording;\n      if (this.recording) {\n        console.log(\"Recording\");\n        // Non-standard options\n        const workerOptions = {\n          encoderWorkerFactory: () => new EncoderWorker(),\n          OggOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/OggOpusEncoder.wasm\",\n          WebMOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/WebMOpusEncoder.wasm\",\n        };\n\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n          // Start recording\n          this.recorder = new MediaRecorder(stream, {}, workerOptions);\n          // Set record to <audio> when recording will be finished\n          this.recorder.start();\n          this.recorder.addEventListener(\"dataavailable\", (e) => {\n            this.recordFile = e.data;\n          });\n        });\n      } else {\n        console.log(\"End recording\");\n        const fileURL = window.URL.createObjectURL(new Blob([this.recordFile]));\n        const fileLink = document.createElement(\"a\");\n        fileLink.href = fileURL;\n        const mydate = new Date();\n        const curr_date = (\"0\" + mydate.getDate()).slice(-2);\n        const curr_month = (\"0\" + (mydate.getMonth() + 1)).slice(-2);\n        const curr_year = mydate.getFullYear();\n        const curr_hour = mydate.getHours();\n        const curr_minute = mydate.getMinutes();\n        const curr_seconds = mydate.getSeconds();\n        const fileName = `${curr_year}${curr_month}${curr_date}_${curr_hour}${curr_minute}${curr_seconds}_record.wav`;\n        fileLink.setAttribute(\"download\", fileName);\n        document.body.appendChild(fileLink);\n\n        fileLink.click();\n        this.recorder.stop();\n        this.recorder.removeEventListener(\"dataavailable\", () => {\n          this.recordFile = null;\n        });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import \"~@ditdot-dev/vue-flow-form/dist/vue-flow-form.css\";\n@import \"~@ditdot-dev/vue-flow-form/dist/vue-flow-form.theme-green.css\";\n</style>"]}]}