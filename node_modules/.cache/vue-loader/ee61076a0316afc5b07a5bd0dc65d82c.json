{"remainingRequest":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/Questions.vue?vue&type=style&index=0&id=d0466a66&scoped=true&lang=css&","dependencies":[{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/Questions.vue","mtime":1635748043450},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/css-loader/dist/cjs.js","mtime":1627740750649},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1634035958257},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/postcss-loader/src/index.js","mtime":1627740750746},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgpAaW1wb3J0ICJ+QGRpdGRvdC1kZXYvdnVlLWZsb3ctZm9ybS9kaXN0L3Z1ZS1mbG93LWZvcm0uY3NzIjsKQGltcG9ydCAifkBkaXRkb3QtZGV2L3Z1ZS1mbG93LWZvcm0vZGlzdC92dWUtZmxvdy1mb3JtLnRoZW1lLWdyZWVuLmNzcyI7Cg=="},{"version":3,"sources":["Questions.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAoQA;AACA","file":"Questions.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div>\n    <flow-form\n      v-if=\"!submitted\"\n      ref=\"flowform\"\n      @step=\"onStep\"\n      @answer=\"onAnswer\"\n      @submit=\"onSubmit\"\n      :questions=\"questions\"\n      :language=\"language\"\n      :standalone=\"true\"\n    >\n    </flow-form>\n    <ul v-else>\n      <li v-for=\"question in questions\" :key=\"question.id\">\n        <p>{{ question.index + 1 }} . {{ question.title }}</p>\n        <p>\n          {{\n            question.id !== \"FlowFormFileType\"\n              ? question.answer\n              : question[0].name\n          }}\n        </p>\n        <hr />\n      </li>\n      <li v-if=\"attachFile\">\n        <p>attachFile</p>\n        <audio controls>\n          <source :src=\"attachFile\" />\n        </audio>\n        <hr />\n      </li>\n    </ul>\n  </div>\n</template>\n\n<script>\nimport FlowForm from \"./FlowForm.vue\";\nimport LanguageModel from \"./../models/LanguageModel\";\nimport QuestionModel, { QuestionType } from \"./../models/QuestionModel\";\nimport OpusMediaRecorder from \"opus-media-recorder\";\n// Use worker-loader\nimport EncoderWorker from \"worker-loader!opus-media-recorder/encoderWorker.js\";\n\nexport default {\n  components: {\n    FlowForm,\n  },\n  data() {\n    return {\n      submitted: false,\n      completed: false,\n      attachFile: null,\n      recording: false,\n      recorder: null,\n      recordFile: null,\n      language: new LanguageModel({\n        enterKey: this.$t(\"enterKey\"),\n        shiftKey: this.$t(\"shiftKey\"),\n        ok: this.$t(\"ok\"),\n        continue: this.$t(\"continue\"),\n        skip: this.$t(\"skip\"),\n        pressEnter: this.$t(\"pressEnter\"),\n        multipleChoiceHelpText: this.$t(\"multipleChoiceHelpText\"),\n        multipleChoiceHelpTextSingle: this.$t(\"multipleChoiceHelpTextSingle\"),\n        otherPrompt: this.$t(\"otherPrompt\"),\n        placeholder: this.$t(\"placeholder\"),\n        submitText: this.$t(\"submitText\"),\n        longTextHelpText: this.$t(\"longTextHelpText\"),\n        prev: this.$t(\"prev\"),\n        next: this.$t(\"next\"),\n        percentCompleted: this.$t(\"percentCompleted\"),\n        invalidPrompt: this.$t(\"invalidPrompt\"),\n        thankYouText: this.$t(\"thankYouText\"),\n        successText: this.$t(\"successText\"),\n        ariaOk: this.$t(\"ariaOk\"),\n        ariaRequired: this.$t(\"ariaRequired\"),\n        ariaPrev: this.$t(\"ariaPrev\"),\n        ariaNext: this.$t(\"ariaNext\"),\n        ariaSubmitText: this.$t(\"ariaSubmitText\"),\n        ariaMultipleChoice: this.$t(\"ariaMultipleChoice\"),\n        ariaTypeAnswer: this.$t(\"ariaTypeAnswer\"),\n      }),\n      questions: [\n        new QuestionModel({\n          id: \"first_name\",\n          tagline: \"Hi! Welcome to our demo survey ðŸ˜Š\",\n          title: \"What is your first name?\",\n          type: QuestionType.Text,\n          placeholder: \"Start typing here...\",\n        }),\n        new QuestionModel({\n          id: \"file\",\n          title: \"Tell me about your previous job\",\n          type: QuestionType.File,\n          allowOther: true,\n        }),\n      ],\n    };\n  },\n\n  beforeCreate() {\n    // Check if MediaRecorder available.\n    if (!window.MediaRecorder) {\n      window.MediaRecorder = OpusMediaRecorder;\n    }\n  },\n\n  methods: {\n    /* eslint-disable-next-line no-unused-vars */\n    onComplete(completed, questionList) {\n      // This method is called whenever the \"completed\" status is changed.\n      this.completed = completed;\n    },\n\n    onAnswer(questionAnswered) {\n      console.log(\"onAnswer\");\n      console.log(questionAnswered);\n    },\n\n    onStep(question) {\n      console.log(\"onStep\");\n      console.log(question);\n    },\n\n    /* eslint-disable-next-line no-unused-vars */\n    onSubmit(questionList) {\n      // This method will only be called if you don't override the\n      // completeButton slot.\n      // this.onSendData()\n      console.log(\"onSubmit\");\n      this.submitted = true;\n      // console.log(questionList);\n      questionList.forEach((question) => {\n        console.log(\"question : \");\n        console.log(question.title);\n        console.log(\"answer: \");\n        console.log(question.answer);\n      });\n    },\n\n    onSendData() {\n      console.log(\"okeke onSendData\");\n      // Set `submitted` to true so the form knows not to allow back/forward\n      // navigation anymore.\n      // this.$refs.flowform.submit();\n      this.$refs.flowform.submitted = true;\n\n      this.submitted = true;\n\n      /* eslint-disable-next-line no-unused-vars */\n      const data = this.getData();\n      /*\n          You can use Fetch API to send the data to your server, eg.:\n\n          fetch(url, {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(data)\n          })\n        */\n    },\n\n    getData() {\n      const data = {\n        questions: [],\n        answers: [],\n      };\n\n      this.questions.forEach((question) => {\n        if (question.title) {\n          let answer = question.answer;\n          if (Array.isArray(answer)) {\n            answer = answer.join(\", \");\n          }\n\n          data.questions.push(question.title);\n          data.answers.push(answer);\n        }\n      });\n\n      return data;\n    },\n\n    onStream(stream) {\n      console.log(\"Got a stream object:\", stream);\n    },\n\n    onResult(data) {\n      console.log(\"onResult\");\n      this.attachFile = window.URL.createObjectURL(new Blob([data]));\n      const fileURL = window.URL.createObjectURL(new Blob([data]));\n      const fileLink = document.createElement(\"a\");\n      fileLink.href = fileURL;\n      const mydate = new Date();\n      const curr_date = (\"0\" + mydate.getDate()).slice(-2);\n      const curr_month = (\"0\" + (mydate.getMonth() + 1)).slice(-2);\n      const curr_year = mydate.getFullYear();\n      const curr_hour = mydate.getHours();\n      const curr_minute = mydate.getMinutes();\n      const curr_seconds = mydate.getSeconds();\n      const fileName = `${curr_year}${curr_month}${curr_date}_${curr_hour}${curr_minute}${curr_seconds}_record.wav`;\n      fileLink.setAttribute(\"download\", fileName);\n      document.body.appendChild(fileLink);\n\n      fileLink.click();\n    },\n\n    handleRecordSafari() {\n      this.recording = !this.recording;\n      if (this.recording) {\n        console.log(\"Recording\");\n        // Non-standard options\n        const workerOptions = {\n          encoderWorkerFactory: () => new EncoderWorker(),\n          OggOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/OggOpusEncoder.wasm\",\n          WebMOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/WebMOpusEncoder.wasm\",\n        };\n\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n          // Start recording\n          this.recorder = new MediaRecorder(stream, {}, workerOptions);\n          // Set record to <audio> when recording will be finished\n          this.recorder.start();\n          this.recorder.addEventListener(\"dataavailable\", (e) => {\n            this.recordFile = e.data;\n          });\n        });\n      } else {\n        console.log(\"End recording\");\n        const fileURL = window.URL.createObjectURL(new Blob([this.recordFile]));\n        const fileLink = document.createElement(\"a\");\n        fileLink.href = fileURL;\n        const mydate = new Date();\n        const curr_date = (\"0\" + mydate.getDate()).slice(-2);\n        const curr_month = (\"0\" + (mydate.getMonth() + 1)).slice(-2);\n        const curr_year = mydate.getFullYear();\n        const curr_hour = mydate.getHours();\n        const curr_minute = mydate.getMinutes();\n        const curr_seconds = mydate.getSeconds();\n        const fileName = `${curr_year}${curr_month}${curr_date}_${curr_hour}${curr_minute}${curr_seconds}_record.wav`;\n        fileLink.setAttribute(\"download\", fileName);\n        document.body.appendChild(fileLink);\n\n        fileLink.click();\n        this.recorder.stop();\n        this.recorder.removeEventListener(\"dataavailable\", () => {\n          this.recordFile = null;\n        });\n      }\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import \"~@ditdot-dev/vue-flow-form/dist/vue-flow-form.css\";\n@import \"~@ditdot-dev/vue-flow-form/dist/vue-flow-form.theme-green.css\";\n</style>"]}]}