{"remainingRequest":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/QuestionTypes/FileType.vue?vue&type=style&index=0&id=d75b0afc&scoped=true&lang=css&","dependencies":[{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/QuestionTypes/FileType.vue","mtime":1635838773487},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/css-loader/dist/cjs.js","mtime":1627740750649},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":1634035958257},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/postcss-loader/src/index.js","mtime":1627740750746},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKCgoKQGltcG9ydCB1cmwoImh0dHBzOi8vY2RuanMuY2xvdWRmbGFyZS5jb20vYWpheC9saWJzL2ZvbnQtYXdlc29tZS81LjE1LjQvY3NzL2FsbC5taW4uY3NzIik7Ci5yZWNvcmQtY29udGFpbmVyIHsKICBkaXNwbGF5OiBmbGV4OwogIGFsaWduLWl0ZW1zOiBjZW50ZXI7CiAgbWFyZ2luLWJvdHRvbTogM3JlbTsKfQoucmVjb3JkLWNvbnRhaW5lciA+ICogewogIG1hcmdpbi1sZWZ0OiAxcmVtOwp9Ci5idG4tY2lyY2xlIHsKICB3aWR0aDogNjRweDsKICBoZWlnaHQ6IDY0cHg7CiAgcGFkZGluZzogMDsKICBmb250LXNpemU6IDUwJTsKICBib3JkZXItcmFkaXVzOiA1MCU7Cn0K"},{"version":3,"sources":["FileType.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+JA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FileType.vue","sourceRoot":"src/components/QuestionTypes","sourcesContent":["/* eslint-disable vue/valid-template-root */\n<template>\n  <div class=\"record-container\">\n    <button class=\"btn-circle\" v-if=\"dataValue\" @click=\"setAnswer(dataValue)\">\n      <i class=\"fa fa-check\"></i>\n    </button>\n\n    <div\n      v-if=\"$browserDetect.meta.name === 'Safari'\"\n      class=\"vue-audio-recorder\"\n      :class=\"{ active: recording }\"\n      @click=\"handleRecordSafari\"\n    >\n      <span></span>\n    </div>\n\n    <VueRecordAudio v-else mode=\"press\" @result=\"onResult\" />\n\n    <audio ref=\"audioRef\" v-show=\"dataValue\" controls />\n\n    <template v-if=\"dataValue\">\n      <button class=\"btn-circle\" @click=\"$refs.audioRef.play()\">\n        <i class=\"fa fa-play-circle\"></i>\n      </button>\n\n      <button class=\"btn-circle\" @click=\"removeRecord\">\n        <i class=\"fa fa-trash\" style=\"color: #ef5350\"></i>\n      </button>\n    </template>\n\n    <input\n      ref=\"input\"\n      type=\"file\"\n      v-bind:accept=\"question.accept\"\n      v-bind:multiple=\"question.multiple\"\n      v-bind:required=\"question.required\"\n      v-on:keyup.enter.prevent=\"onEnter\"\n      v-on:keyup.tab.prevent=\"onEnter\"\n      v-on:focus=\"setFocus\"\n      v-on:blur=\"unsetFocus\"\n      v-on:change=\"onChange\"\n      style=\"display: none\"\n    />\n  </div>\n</template>\n\n<script>\nimport BaseType from \"./BaseType.vue\";\nimport { QuestionType } from \"../../models/QuestionModel\";\nimport OpusMediaRecorder from \"opus-media-recorder\";\n// Use worker-loader\nimport EncoderWorker from \"worker-loader!opus-media-recorder/encoderWorker.js\";\n\nexport default {\n  extends: BaseType,\n  name: QuestionType.File,\n\n  components: {},\n\n  data() {\n    return {\n      recording: false,\n      recorder: null,\n    };\n  },\n\n  mounted() {\n    if (this.question.accept) {\n      this.mimeTypeRegex = new RegExp(\n        this.question.accept.replace(\"*\", \"[^\\\\/,]+\")\n      );\n    }\n  },\n\n  beforeCreate() {\n    // Check if MediaRecorder available.\n    if (!window.MediaRecorder) {\n      window.MediaRecorder = OpusMediaRecorder;\n    }\n  },\n\n  methods: {\n    onChange() {\n      this.dirty = true;\n      this.dataValue = this.files;\n      this.onKeyDown();\n    },\n\n    onResult(data) {\n      this.dirty = true;\n      this.dataValue = window.URL.createObjectURL(data);\n      this.$refs.audioRef.src = window.URL.createObjectURL(data);\n      this.handleSaveFile(data);\n    },\n\n    handleSaveFile(data) {\n      // Begin handle create file to download\n      const fileURL = window.URL.createObjectURL(new Blob([data]));\n      const fileLink = document.createElement(\"a\");\n      fileLink.href = fileURL;\n      const mydate = new Date();\n      const curr_date = (\"0\" + mydate.getDate()).slice(-2);\n      const curr_month = (\"0\" + (mydate.getMonth() + 1)).slice(-2);\n      const curr_year = mydate.getFullYear();\n      const curr_hour = mydate.getHours();\n      const curr_minute = mydate.getMinutes();\n      const curr_seconds = mydate.getSeconds();\n      const fileName = `${curr_year}${curr_month}${curr_date}_${curr_hour}${curr_minute}${curr_seconds}_record.wav`;\n      fileLink.setAttribute(\"download\", fileName);\n      document.body.appendChild(fileLink);\n\n      fileLink.click();\n      // Save file to local\n    },\n\n    handleRecordSafari() {\n      this.recording = !this.recording;\n      if (this.recording) {\n        console.log(\"Begin Recording\");\n        // Non-standard options\n        const workerOptions = {\n          encoderWorkerFactory: () => new EncoderWorker(),\n          OggOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/OggOpusEncoder.wasm\",\n          WebMOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/WebMOpusEncoder.wasm\",\n        };\n\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n          // Start recording\n          this.recorder = new MediaRecorder(stream, {}, workerOptions);\n          // Set record to <audio> when recording will be finished\n          this.recorder.start();\n          this.recorder.addEventListener(\"dataavailable\", (e) => {\n            const { data } = e;\n            this.onResult(data);\n          });\n        });\n      } else {\n        console.log(\"End recording\");\n        this.recorder.stop();\n      }\n    },\n\n    removeRecord() {\n      this.dirty = true;\n      this.dataValue = null;\n      this.setAnswer(null);\n    },\n  },\n  computed: {\n    files() {\n      return this.$refs.input.files;\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\");\n.record-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 3rem;\n}\n.record-container > * {\n  margin-left: 1rem;\n}\n.btn-circle {\n  width: 64px;\n  height: 64px;\n  padding: 0;\n  font-size: 50%;\n  border-radius: 50%;\n}\n</style>"]}]}