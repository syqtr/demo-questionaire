{"remainingRequest":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/QuestionTypes/FileType.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/src/components/QuestionTypes/FileType.vue","mtime":1635838773487},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/babel-loader/lib/index.js","mtime":1627740747092},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/cache-loader/dist/cjs.js","mtime":1627740747088},{"path":"/Users/sytruong/Hoiwa/demo-questionaire/demo-questionaire/node_modules/vue-loader/lib/index.js","mtime":1634035958257}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:Ly8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KLy8KCmltcG9ydCBCYXNlVHlwZSBmcm9tICIuL0Jhc2VUeXBlLnZ1ZSI7CmltcG9ydCB7IFF1ZXN0aW9uVHlwZSB9IGZyb20gIi4uLy4uL21vZGVscy9RdWVzdGlvbk1vZGVsIjsKaW1wb3J0IE9wdXNNZWRpYVJlY29yZGVyIGZyb20gIm9wdXMtbWVkaWEtcmVjb3JkZXIiOwovLyBVc2Ugd29ya2VyLWxvYWRlcgppbXBvcnQgRW5jb2RlcldvcmtlciBmcm9tICJ3b3JrZXItbG9hZGVyIW9wdXMtbWVkaWEtcmVjb3JkZXIvZW5jb2Rlcldvcmtlci5qcyI7CgpleHBvcnQgZGVmYXVsdCB7CiAgZXh0ZW5kczogQmFzZVR5cGUsCiAgbmFtZTogUXVlc3Rpb25UeXBlLkZpbGUsCgogIGNvbXBvbmVudHM6IHt9LAoKICBkYXRhKCkgewogICAgcmV0dXJuIHsKICAgICAgcmVjb3JkaW5nOiBmYWxzZSwKICAgICAgcmVjb3JkZXI6IG51bGwsCiAgICB9OwogIH0sCgogIG1vdW50ZWQoKSB7CiAgICBpZiAodGhpcy5xdWVzdGlvbi5hY2NlcHQpIHsKICAgICAgdGhpcy5taW1lVHlwZVJlZ2V4ID0gbmV3IFJlZ0V4cCgKICAgICAgICB0aGlzLnF1ZXN0aW9uLmFjY2VwdC5yZXBsYWNlKCIqIiwgIlteXFwvLF0rIikKICAgICAgKTsKICAgIH0KICB9LAoKICBiZWZvcmVDcmVhdGUoKSB7CiAgICAvLyBDaGVjayBpZiBNZWRpYVJlY29yZGVyIGF2YWlsYWJsZS4KICAgIGlmICghd2luZG93Lk1lZGlhUmVjb3JkZXIpIHsKICAgICAgd2luZG93Lk1lZGlhUmVjb3JkZXIgPSBPcHVzTWVkaWFSZWNvcmRlcjsKICAgIH0KICB9LAoKICBtZXRob2RzOiB7CiAgICBvbkNoYW5nZSgpIHsKICAgICAgdGhpcy5kaXJ0eSA9IHRydWU7CiAgICAgIHRoaXMuZGF0YVZhbHVlID0gdGhpcy5maWxlczsKICAgICAgdGhpcy5vbktleURvd24oKTsKICAgIH0sCgogICAgb25SZXN1bHQoZGF0YSkgewogICAgICB0aGlzLmRpcnR5ID0gdHJ1ZTsKICAgICAgdGhpcy5kYXRhVmFsdWUgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChkYXRhKTsKICAgICAgdGhpcy4kcmVmcy5hdWRpb1JlZi5zcmMgPSB3aW5kb3cuVVJMLmNyZWF0ZU9iamVjdFVSTChkYXRhKTsKICAgICAgdGhpcy5oYW5kbGVTYXZlRmlsZShkYXRhKTsKICAgIH0sCgogICAgaGFuZGxlU2F2ZUZpbGUoZGF0YSkgewogICAgICAvLyBCZWdpbiBoYW5kbGUgY3JlYXRlIGZpbGUgdG8gZG93bmxvYWQKICAgICAgY29uc3QgZmlsZVVSTCA9IHdpbmRvdy5VUkwuY3JlYXRlT2JqZWN0VVJMKG5ldyBCbG9iKFtkYXRhXSkpOwogICAgICBjb25zdCBmaWxlTGluayA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoImEiKTsKICAgICAgZmlsZUxpbmsuaHJlZiA9IGZpbGVVUkw7CiAgICAgIGNvbnN0IG15ZGF0ZSA9IG5ldyBEYXRlKCk7CiAgICAgIGNvbnN0IGN1cnJfZGF0ZSA9ICgiMCIgKyBteWRhdGUuZ2V0RGF0ZSgpKS5zbGljZSgtMik7CiAgICAgIGNvbnN0IGN1cnJfbW9udGggPSAoIjAiICsgKG15ZGF0ZS5nZXRNb250aCgpICsgMSkpLnNsaWNlKC0yKTsKICAgICAgY29uc3QgY3Vycl95ZWFyID0gbXlkYXRlLmdldEZ1bGxZZWFyKCk7CiAgICAgIGNvbnN0IGN1cnJfaG91ciA9IG15ZGF0ZS5nZXRIb3VycygpOwogICAgICBjb25zdCBjdXJyX21pbnV0ZSA9IG15ZGF0ZS5nZXRNaW51dGVzKCk7CiAgICAgIGNvbnN0IGN1cnJfc2Vjb25kcyA9IG15ZGF0ZS5nZXRTZWNvbmRzKCk7CiAgICAgIGNvbnN0IGZpbGVOYW1lID0gYCR7Y3Vycl95ZWFyfSR7Y3Vycl9tb250aH0ke2N1cnJfZGF0ZX1fJHtjdXJyX2hvdXJ9JHtjdXJyX21pbnV0ZX0ke2N1cnJfc2Vjb25kc31fcmVjb3JkLndhdmA7CiAgICAgIGZpbGVMaW5rLnNldEF0dHJpYnV0ZSgiZG93bmxvYWQiLCBmaWxlTmFtZSk7CiAgICAgIGRvY3VtZW50LmJvZHkuYXBwZW5kQ2hpbGQoZmlsZUxpbmspOwoKICAgICAgZmlsZUxpbmsuY2xpY2soKTsKICAgICAgLy8gU2F2ZSBmaWxlIHRvIGxvY2FsCiAgICB9LAoKICAgIGhhbmRsZVJlY29yZFNhZmFyaSgpIHsKICAgICAgdGhpcy5yZWNvcmRpbmcgPSAhdGhpcy5yZWNvcmRpbmc7CiAgICAgIGlmICh0aGlzLnJlY29yZGluZykgewogICAgICAgIGNvbnNvbGUubG9nKCJCZWdpbiBSZWNvcmRpbmciKTsKICAgICAgICAvLyBOb24tc3RhbmRhcmQgb3B0aW9ucwogICAgICAgIGNvbnN0IHdvcmtlck9wdGlvbnMgPSB7CiAgICAgICAgICBlbmNvZGVyV29ya2VyRmFjdG9yeTogKCkgPT4gbmV3IEVuY29kZXJXb3JrZXIoKSwKICAgICAgICAgIE9nZ09wdXNFbmNvZGVyV2FzbVBhdGg6CiAgICAgICAgICAgICJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL29wdXMtbWVkaWEtcmVjb3JkZXJAbGF0ZXN0L09nZ09wdXNFbmNvZGVyLndhc20iLAogICAgICAgICAgV2ViTU9wdXNFbmNvZGVyV2FzbVBhdGg6CiAgICAgICAgICAgICJodHRwczovL2Nkbi5qc2RlbGl2ci5uZXQvbnBtL29wdXMtbWVkaWEtcmVjb3JkZXJAbGF0ZXN0L1dlYk1PcHVzRW5jb2Rlci53YXNtIiwKICAgICAgICB9OwoKICAgICAgICBuYXZpZ2F0b3IubWVkaWFEZXZpY2VzLmdldFVzZXJNZWRpYSh7IGF1ZGlvOiB0cnVlIH0pLnRoZW4oKHN0cmVhbSkgPT4gewogICAgICAgICAgLy8gU3RhcnQgcmVjb3JkaW5nCiAgICAgICAgICB0aGlzLnJlY29yZGVyID0gbmV3IE1lZGlhUmVjb3JkZXIoc3RyZWFtLCB7fSwgd29ya2VyT3B0aW9ucyk7CiAgICAgICAgICAvLyBTZXQgcmVjb3JkIHRvIDxhdWRpbz4gd2hlbiByZWNvcmRpbmcgd2lsbCBiZSBmaW5pc2hlZAogICAgICAgICAgdGhpcy5yZWNvcmRlci5zdGFydCgpOwogICAgICAgICAgdGhpcy5yZWNvcmRlci5hZGRFdmVudExpc3RlbmVyKCJkYXRhYXZhaWxhYmxlIiwgKGUpID0+IHsKICAgICAgICAgICAgY29uc3QgeyBkYXRhIH0gPSBlOwogICAgICAgICAgICB0aGlzLm9uUmVzdWx0KGRhdGEpOwogICAgICAgICAgfSk7CiAgICAgICAgfSk7CiAgICAgIH0gZWxzZSB7CiAgICAgICAgY29uc29sZS5sb2coIkVuZCByZWNvcmRpbmciKTsKICAgICAgICB0aGlzLnJlY29yZGVyLnN0b3AoKTsKICAgICAgfQogICAgfSwKCiAgICByZW1vdmVSZWNvcmQoKSB7CiAgICAgIHRoaXMuZGlydHkgPSB0cnVlOwogICAgICB0aGlzLmRhdGFWYWx1ZSA9IG51bGw7CiAgICAgIHRoaXMuc2V0QW5zd2VyKG51bGwpOwogICAgfSwKICB9LAogIGNvbXB1dGVkOiB7CiAgICBmaWxlcygpIHsKICAgICAgcmV0dXJuIHRoaXMuJHJlZnMuaW5wdXQuZmlsZXM7CiAgICB9LAogIH0sCn07Cg=="},{"version":3,"sources":["FileType.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+CA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"FileType.vue","sourceRoot":"src/components/QuestionTypes","sourcesContent":["/* eslint-disable vue/valid-template-root */\n<template>\n  <div class=\"record-container\">\n    <button class=\"btn-circle\" v-if=\"dataValue\" @click=\"setAnswer(dataValue)\">\n      <i class=\"fa fa-check\"></i>\n    </button>\n\n    <div\n      v-if=\"$browserDetect.meta.name === 'Safari'\"\n      class=\"vue-audio-recorder\"\n      :class=\"{ active: recording }\"\n      @click=\"handleRecordSafari\"\n    >\n      <span></span>\n    </div>\n\n    <VueRecordAudio v-else mode=\"press\" @result=\"onResult\" />\n\n    <audio ref=\"audioRef\" v-show=\"dataValue\" controls />\n\n    <template v-if=\"dataValue\">\n      <button class=\"btn-circle\" @click=\"$refs.audioRef.play()\">\n        <i class=\"fa fa-play-circle\"></i>\n      </button>\n\n      <button class=\"btn-circle\" @click=\"removeRecord\">\n        <i class=\"fa fa-trash\" style=\"color: #ef5350\"></i>\n      </button>\n    </template>\n\n    <input\n      ref=\"input\"\n      type=\"file\"\n      v-bind:accept=\"question.accept\"\n      v-bind:multiple=\"question.multiple\"\n      v-bind:required=\"question.required\"\n      v-on:keyup.enter.prevent=\"onEnter\"\n      v-on:keyup.tab.prevent=\"onEnter\"\n      v-on:focus=\"setFocus\"\n      v-on:blur=\"unsetFocus\"\n      v-on:change=\"onChange\"\n      style=\"display: none\"\n    />\n  </div>\n</template>\n\n<script>\nimport BaseType from \"./BaseType.vue\";\nimport { QuestionType } from \"../../models/QuestionModel\";\nimport OpusMediaRecorder from \"opus-media-recorder\";\n// Use worker-loader\nimport EncoderWorker from \"worker-loader!opus-media-recorder/encoderWorker.js\";\n\nexport default {\n  extends: BaseType,\n  name: QuestionType.File,\n\n  components: {},\n\n  data() {\n    return {\n      recording: false,\n      recorder: null,\n    };\n  },\n\n  mounted() {\n    if (this.question.accept) {\n      this.mimeTypeRegex = new RegExp(\n        this.question.accept.replace(\"*\", \"[^\\\\/,]+\")\n      );\n    }\n  },\n\n  beforeCreate() {\n    // Check if MediaRecorder available.\n    if (!window.MediaRecorder) {\n      window.MediaRecorder = OpusMediaRecorder;\n    }\n  },\n\n  methods: {\n    onChange() {\n      this.dirty = true;\n      this.dataValue = this.files;\n      this.onKeyDown();\n    },\n\n    onResult(data) {\n      this.dirty = true;\n      this.dataValue = window.URL.createObjectURL(data);\n      this.$refs.audioRef.src = window.URL.createObjectURL(data);\n      this.handleSaveFile(data);\n    },\n\n    handleSaveFile(data) {\n      // Begin handle create file to download\n      const fileURL = window.URL.createObjectURL(new Blob([data]));\n      const fileLink = document.createElement(\"a\");\n      fileLink.href = fileURL;\n      const mydate = new Date();\n      const curr_date = (\"0\" + mydate.getDate()).slice(-2);\n      const curr_month = (\"0\" + (mydate.getMonth() + 1)).slice(-2);\n      const curr_year = mydate.getFullYear();\n      const curr_hour = mydate.getHours();\n      const curr_minute = mydate.getMinutes();\n      const curr_seconds = mydate.getSeconds();\n      const fileName = `${curr_year}${curr_month}${curr_date}_${curr_hour}${curr_minute}${curr_seconds}_record.wav`;\n      fileLink.setAttribute(\"download\", fileName);\n      document.body.appendChild(fileLink);\n\n      fileLink.click();\n      // Save file to local\n    },\n\n    handleRecordSafari() {\n      this.recording = !this.recording;\n      if (this.recording) {\n        console.log(\"Begin Recording\");\n        // Non-standard options\n        const workerOptions = {\n          encoderWorkerFactory: () => new EncoderWorker(),\n          OggOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/OggOpusEncoder.wasm\",\n          WebMOpusEncoderWasmPath:\n            \"https://cdn.jsdelivr.net/npm/opus-media-recorder@latest/WebMOpusEncoder.wasm\",\n        };\n\n        navigator.mediaDevices.getUserMedia({ audio: true }).then((stream) => {\n          // Start recording\n          this.recorder = new MediaRecorder(stream, {}, workerOptions);\n          // Set record to <audio> when recording will be finished\n          this.recorder.start();\n          this.recorder.addEventListener(\"dataavailable\", (e) => {\n            const { data } = e;\n            this.onResult(data);\n          });\n        });\n      } else {\n        console.log(\"End recording\");\n        this.recorder.stop();\n      }\n    },\n\n    removeRecord() {\n      this.dirty = true;\n      this.dataValue = null;\n      this.setAnswer(null);\n    },\n  },\n  computed: {\n    files() {\n      return this.$refs.input.files;\n    },\n  },\n};\n</script>\n\n<style scoped>\n@import url(\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/5.15.4/css/all.min.css\");\n.record-container {\n  display: flex;\n  align-items: center;\n  margin-bottom: 3rem;\n}\n.record-container > * {\n  margin-left: 1rem;\n}\n.btn-circle {\n  width: 64px;\n  height: 64px;\n  padding: 0;\n  font-size: 50%;\n  border-radius: 50%;\n}\n</style>"]}]}